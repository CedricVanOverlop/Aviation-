import tkinter as tk
from tkinter import ttk, messagebox
import sys
import os
from datetime import datetime
from abc import ABC, abstractmethod

# Ajouter le chemin du module Core
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from data.data_manager import DataManager

# Importer les modules des onglets
try:
    from interfaces.tabs.flights_tab import create_flights_tab_content, refresh_flights_data
    FLIGHTS_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Module flights_tab non disponible: {e}")
    FLIGHTS_MODULE_AVAILABLE = False

try:
    from interfaces.tabs.passengers_tab import create_passengers_tab_content, refresh_passengers_data
    PASSENGERS_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Module passengers_tab non disponible: {e}")
    PASSENGERS_MODULE_AVAILABLE = False

try:
    from interfaces.tabs.personnel_tab import create_personnel_tab_content, refresh_personnel_data
    PERSONNEL_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Module personnel_tab non disponible: {e}")
    PERSONNEL_MODULE_AVAILABLE = False

try:
    from interfaces.tabs.reservations_tab import create_reservations_tab_content, refresh_reservations_data
    RESERVATIONS_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Module reservations_tab non disponible: {e}")
    RESERVATIONS_MODULE_AVAILABLE = False

try:
    from interfaces.tabs.aircraft_tab import ModernAircraftDialog, SafeAircraftManager
    AIRCRAFT_MODULE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Module aircraft_tab non disponible: {e}")
    AIRCRAFT_MODULE_AVAILABLE = False


class NotificationCenter:
    """Centre de notifications centralis√© pour l'interface"""
    
    def __init__(self, status_var, root):
        self.status_var = status_var
        self.root = root
        self.message_queue = []
        self.current_job = None
    
    def show_success(self, message, duration=3000):
        """Affiche un message de succ√®s"""
        self.status_var.set(f"‚úÖ {message}")
        self._schedule_clear(duration)
    
    def show_error(self, message, duration=5000):
        """Affiche un message d'erreur"""
        self.status_var.set(f"‚ùå {message}")
        self._schedule_clear(duration)
    
    def show_warning(self, message, duration=4000):
        """Affiche un message d'avertissement"""
        self.status_var.set(f"‚ö†Ô∏è {message}")
        self._schedule_clear(duration)
    
    def show_info(self, message, duration=2000):
        """Affiche un message d'information"""
        self.status_var.set(f"‚ÑπÔ∏è {message}")
        self._schedule_clear(duration)
    
    def show_progress(self, message):
        """Affiche un message de progression (permanent jusqu'√† update)"""
        self.status_var.set(f"üîÑ {message}")
        if self.current_job:
            self.root.after_cancel(self.current_job)
            self.current_job = None
    
    def clear(self):
        """Efface le statut actuel"""
        self.status_var.set("Application pr√™te")
        if self.current_job:
            self.root.after_cancel(self.current_job)
            self.current_job = None
    
    def _schedule_clear(self, duration):
        """Programme l'effacement du message"""
        if self.current_job:
            self.root.after_cancel(self.current_job)
        self.current_job = self.root.after(duration, self.clear)


class BaseTab(ABC):
    """Classe de base pour tous les onglets"""
    
    def __init__(self, parent_frame, data_manager, notification_center):
        self.parent_frame = parent_frame
        self.data_manager = data_manager
        self.notification_center = notification_center
        self.widgets = {}
        self.is_loaded = False
        
        # Cr√©er le frame principal
        self.frame = ttk.Frame(parent_frame)
        
        try:
            self.setup_ui()
            self.load_data()
            self.is_loaded = True
            print(f"‚úÖ Onglet {self.__class__.__name__} cr√©√© avec succ√®s")
        except Exception as e:
            self.create_error_ui(e)
            print(f"‚ùå Erreur cr√©ation {self.__class__.__name__}: {e}")
    
    @abstractmethod
    def setup_ui(self):
        """Configure l'interface utilisateur de l'onglet"""
        pass
    
    @abstractmethod
    def load_data(self):
        """Charge les donn√©es initiales"""
        pass
    
    @abstractmethod
    def refresh_data(self):
        """Rafra√Æchit les donn√©es"""
        pass
    
    def create_error_ui(self, error):
        """Cr√©e une interface d'erreur g√©n√©rique"""
        error_frame = ttk.Frame(self.frame)
        error_frame.pack(expand=True, fill="both")
        
        # Ic√¥ne d'erreur
        ttk.Label(error_frame, text="‚ö†Ô∏è", font=('Arial', 48), foreground='red').pack(pady=20)
        
        # Message d'erreur
        ttk.Label(error_frame, text="Erreur de chargement de l'onglet", 
                 font=('Arial', 16, 'bold'), foreground='red').pack()
        
        ttk.Label(error_frame, text=str(error), 
                 font=('Arial', 10), foreground='gray', wraplength=400).pack(pady=10)
        
        # Bouton de rechargement
        ttk.Button(error_frame, text="üîÑ R√©essayer", 
                  command=self.retry_load).pack(pady=10)
    
    def retry_load(self):
        """Tente de recharger l'onglet"""
        try:
            # Nettoyer le frame
            for widget in self.frame.winfo_children():
                widget.destroy()
            
            # Relancer la cr√©ation
            self.setup_ui()
            self.load_data()
            self.is_loaded = True
            self.notification_center.show_success("Onglet recharg√© avec succ√®s")
        except Exception as e:
            self.create_error_ui(e)
            self.notification_center.show_error(f"√âchec du rechargement: {e}")


class DashboardTab(BaseTab):
    """Onglet tableau de bord avec statistiques en temps r√©el"""
    
    def setup_ui(self):
        """Configure l'interface du dashboard"""
        # Titre principal
        title_frame = ttk.Frame(self.frame)
        title_frame.pack(fill="x", padx=20, pady=20)
        
        ttk.Label(title_frame, text="üìä Tableau de Bord", 
                 font=('Arial', 20, 'bold')).pack(side="left")
        
        # Bouton de rafra√Æchissement
        ttk.Button(title_frame, text="üîÑ Actualiser", 
                  command=self.refresh_data).pack(side="right")
        
        # Statistiques principales
        self.create_stats_section()
        
        # Activit√© r√©cente
        self.create_activity_section()
        
        # Actions rapides
        self.create_quick_actions()
    
    def create_stats_section(self):
        """Cr√©e la section des statistiques"""
        stats_frame = ttk.LabelFrame(self.frame, text="üìà Statistiques Principales", padding=15)
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        # Variables pour les statistiques
        self.stat_vars = {}
        
        # Configuration des statistiques
        stats_config = [
            ("Vols", "0", "üõ´", "blue"),
            ("Passagers", "0", "üë•", "green"),
            ("Personnel", "0", "üë®‚Äç‚úàÔ∏è", "purple"),
            ("R√©servations", "0", "üé´", "orange")
        ]
        
        # Cr√©er les cartes de statistiques
        for i, (title, value, icon, color) in enumerate(stats_config):
            var = tk.StringVar(value=value)
            self.stat_vars[title] = var
            
            # Frame pour chaque statistique
            stat_card = ttk.Frame(stats_frame, relief="solid", borderwidth=1)
            stat_card.grid(row=0, column=i, padx=10, pady=5, sticky="ew")
            
            # Ic√¥ne
            ttk.Label(stat_card, text=icon, font=('Arial', 24)).pack(pady=(10, 5))
            
            # Titre
            ttk.Label(stat_card, text=title, font=('Arial', 12, 'bold')).pack()
            
            # Valeur
            value_label = ttk.Label(stat_card, textvariable=var, 
                                   font=('Arial', 18, 'bold'))
            value_label.pack(pady=(5, 10))
            
            # Colorer selon le type
            if color == "blue":
                value_label.configure(foreground="blue")
            elif color == "green":
                value_label.configure(foreground="green")
            elif color == "purple":
                value_label.configure(foreground="purple")
            elif color == "orange":
                value_label.configure(foreground="orange")
        
        # Configuration responsive
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
    
    def create_activity_section(self):
        """Cr√©e la section d'activit√© r√©cente"""
        activity_frame = ttk.LabelFrame(self.frame, text="üìã Activit√© R√©cente", padding=15)
        activity_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Zone de texte pour l'activit√©
        self.activity_text = tk.Text(activity_frame, height=8, wrap=tk.WORD, 
                                    font=('Arial', 10), state=tk.DISABLED)
        
        # Scrollbar pour le texte
        scrollbar = ttk.Scrollbar(activity_frame, orient="vertical", command=self.activity_text.yview)
        self.activity_text.configure(yscrollcommand=scrollbar.set)
        
        # Placement
        self.activity_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_quick_actions(self):
        """Cr√©e la section des actions rapides"""
        actions_frame = ttk.LabelFrame(self.frame, text="‚ö° Actions Rapides", padding=15)
        actions_frame.pack(fill="x", padx=20, pady=10)
        
        # Boutons d'actions
        actions = [
            ("‚ûï Nouveau Vol", self.quick_new_flight),
            ("üë§ Nouveau Passager", self.quick_new_passenger),
            ("üé´ Nouvelle R√©servation", self.quick_new_reservation),
            ("üìä Rapport Complet", self.show_complete_report)
        ]
        
        for i, (text, command) in enumerate(actions):
            ttk.Button(actions_frame, text=text, command=command, 
                      width=20).grid(row=0, column=i, padx=5, pady=5)
        
        # Configuration responsive
        for i in range(len(actions)):
            actions_frame.grid_columnconfigure(i, weight=1)
    
    def load_data(self):
        """Charge les donn√©es initiales"""
        self.refresh_data()
    
    def refresh_data(self):
        """Rafra√Æchit les donn√©es du dashboard"""
        try:
            # Charger les statistiques
            flights = self.data_manager.get_flights()
            passengers = self.data_manager.get_passengers()
            personnel = self.data_manager.get_personnel()
            reservations = self.data_manager.get_reservations()
            
            # Mettre √† jour les variables
            self.stat_vars["Vols"].set(str(len(flights)))
            self.stat_vars["Passagers"].set(str(len(passengers)))
            self.stat_vars["Personnel"].set(str(len(personnel)))
            self.stat_vars["R√©servations"].set(str(len(reservations)))
            
            # Mettre √† jour l'activit√© r√©cente
            self.update_activity_log()
            
            self.notification_center.show_success("Dashboard mis √† jour")
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur mise √† jour dashboard: {e}")
    
    def update_activity_log(self):
        """Met √† jour le journal d'activit√©"""
        try:
            self.activity_text.configure(state=tk.NORMAL)
            self.activity_text.delete(1.0, tk.END)
            
            # G√©n√©rer des informations d'activit√©
            current_time = datetime.now().strftime("%H:%M:%S")
            
            activity_log = f"""üïê Derni√®re mise √† jour: {current_time}

üìä R√âSUM√â SYST√àME:
‚Ä¢ Syst√®me op√©rationnel
‚Ä¢ Toutes les donn√©es charg√©es
‚Ä¢ Interface responsive

üîÑ ACTIVIT√âS R√âCENTES:
‚Ä¢ Dashboard rafra√Æchi
‚Ä¢ Statistiques mises √† jour
‚Ä¢ Connexions actives

üí° CONSEILS:
‚Ä¢ Utilisez Ctrl+R pour actualiser
‚Ä¢ Double-cliquez pour modifier
‚Ä¢ Consultez l'aide avec Ctrl+H

üìà PERFORMANCE:
‚Ä¢ Temps de r√©ponse: < 1s
‚Ä¢ M√©moire utilis√©e: Optimale
‚Ä¢ √âtat g√©n√©ral: Excellent"""
            
            self.activity_text.insert(tk.END, activity_log)
            self.activity_text.configure(state=tk.DISABLED)
            
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour activit√©: {e}")
    
    def quick_new_flight(self):
        """Action rapide: nouveau vol"""
        self.notification_center.show_info("Redirection vers l'onglet Vols...")
        # Ici on pourrait changer d'onglet automatiquement
    
    def quick_new_passenger(self):
        """Action rapide: nouveau passager"""
        self.notification_center.show_info("Redirection vers l'onglet Passagers...")
    
    def quick_new_reservation(self):
        """Action rapide: nouvelle r√©servation"""
        self.notification_center.show_info("Redirection vers l'onglet R√©servations...")
    
    def show_complete_report(self):
        """Affiche un rapport complet"""
        try:
            flights = self.data_manager.get_flights()
            passengers = self.data_manager.get_passengers()
            personnel = self.data_manager.get_personnel()
            reservations = self.data_manager.get_reservations()
            aircraft = self.data_manager.get_aircraft()
            
            # Statistiques avanc√©es
            active_flights = len([f for f in flights if f.get('statut') in ['programme', 'en_vol']])
            active_reservations = len([r for r in reservations if r.get('statut') == 'active'])
            available_personnel = len([p for p in personnel if p.get('disponible', True)])
            operational_aircraft = len([a for a in aircraft if a.get('etat') == 'operationnel'])
            
            report = f"""üìä RAPPORT COMPLET DU SYST√àME

üõ´ VOLS:
‚Ä¢ Total: {len(flights)}
‚Ä¢ Actifs: {active_flights}
‚Ä¢ Taux d'activit√©: {(active_flights/max(len(flights), 1)*100):.1f}%

üë• PASSAGERS:
‚Ä¢ Enregistr√©s: {len(passengers)}
‚Ä¢ Avec r√©servations: {active_reservations}

üë®‚Äç‚úàÔ∏è PERSONNEL:
‚Ä¢ Total: {len(personnel)}
‚Ä¢ Disponibles: {available_personnel}
‚Ä¢ Taux de disponibilit√©: {(available_personnel/max(len(personnel), 1)*100):.1f}%

‚úàÔ∏è FLOTTE:
‚Ä¢ Total avions: {len(aircraft)}
‚Ä¢ Op√©rationnels: {operational_aircraft}
‚Ä¢ Taux op√©rationnel: {(operational_aircraft/max(len(aircraft), 1)*100):.1f}%

üé´ R√âSERVATIONS:
‚Ä¢ Total: {len(reservations)}
‚Ä¢ Actives: {active_reservations}

üìÖ G√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
            
            messagebox.showinfo("Rapport Complet", report)
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur g√©n√©ration rapport: {e}")


class AircraftTab(BaseTab):
    """Onglet gestion des avions avec interface moderne"""
    
    def setup_ui(self):
        """Configure l'interface de gestion des avions"""
        # Initialiser le gestionnaire s√©curis√©
        if AIRCRAFT_MODULE_AVAILABLE:
            self.safe_manager = SafeAircraftManager(self.data_manager, self.notification_center)
        else:
            self.safe_manager = None
        
        self.create_aircraft_interface()
    
    def create_aircraft_interface(self):
        """Cr√©e l'interface de gestion des avions"""
        # Barre d'outils
        toolbar = ttk.Frame(self.frame)
        toolbar.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
        
        ttk.Button(toolbar, text="‚ûï Nouvel Avion", 
                  command=self.new_aircraft, 
                  style='Action.TButton').grid(row=0, column=0, padx=(0, 5))
        ttk.Button(toolbar, text="‚úèÔ∏è Modifier", 
                  command=self.edit_aircraft).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(toolbar, text="üîß Maintenance", 
                  command=self.aircraft_maintenance).grid(row=0, column=2, padx=(0, 5))
        ttk.Button(toolbar, text="üóëÔ∏è Retirer", 
                  command=self.delete_aircraft, 
                  style='Danger.TButton').grid(row=0, column=3, padx=(0, 20))
        
        # Recherche
        ttk.Label(toolbar, text="üîç Recherche:").grid(row=0, column=4, padx=(0, 5))
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(toolbar, textvariable=self.search_var, width=20)
        search_entry.grid(row=0, column=5, padx=(0, 5))
        search_entry.bind('<KeyRelease>', self.filter_aircraft)
        
        # Filtre par √©tat
        ttk.Label(toolbar, text="√âtat:").grid(row=0, column=6, padx=(10, 5))
        self.filter_var = tk.StringVar(value="Tous")
        filter_combo = ttk.Combobox(toolbar, textvariable=self.filter_var, width=15, state="readonly")
        filter_combo['values'] = ['Tous', 'Op√©rationnel', 'En vol', 'Maintenance', 'Hors service']
        filter_combo.grid(row=0, column=7, padx=(0, 5))
        filter_combo.bind('<<ComboboxSelected>>', self.filter_aircraft)
        
        # Tableau des avions
        columns = ('ID', 'Mod√®le', 'Compagnie', 'Capacit√©', '√âtat', 'Localisation', 'Autonomie', 'Derni√®re Maintenance')
        self.aircraft_tree = ttk.Treeview(self.frame, columns=columns, show='headings')
        self.aircraft_tree.grid(row=1, column=0, sticky="nsew", padx=10, pady=(0, 10))
        
        # Configuration colonnes
        column_widths = {
            'ID': 100, 'Mod√®le': 150, 'Compagnie': 120, 'Capacit√©': 80, 
            '√âtat': 100, 'Localisation': 120, 'Autonomie': 100, 'Derni√®re Maintenance': 150
        }
        for col in columns:
            self.aircraft_tree.heading(col, text=col)
            self.aircraft_tree.column(col, width=column_widths.get(col, 100))
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(self.frame, orient="vertical", command=self.aircraft_tree.yview)
        v_scrollbar.grid(row=1, column=1, sticky="ns")
        self.aircraft_tree.configure(yscrollcommand=v_scrollbar.set)
        
        h_scrollbar = ttk.Scrollbar(self.frame, orient="horizontal", command=self.aircraft_tree.xview)
        h_scrollbar.grid(row=2, column=0, sticky="ew")
        self.aircraft_tree.configure(xscrollcommand=h_scrollbar.set)
        
        # Configuration responsive
        self.frame.grid_rowconfigure(1, weight=1)
        self.frame.grid_columnconfigure(0, weight=1)
        
        # Double-clic pour modifier
        self.aircraft_tree.bind('<Double-1>', lambda e: self.edit_aircraft())
    
    def load_data(self):
        """Charge les donn√©es initiales"""
        self.refresh_data()
    
    def refresh_data(self):
        """Rafra√Æchit les donn√©es des avions"""
        try:
            # Vider le tableau
            for item in self.aircraft_tree.get_children():
                self.aircraft_tree.delete(item)
            
            aircraft_list = self.data_manager.get_aircraft()
            airports = {a['code_iata']: a['ville'] for a in self.data_manager.get_airports()}
            
            for aircraft in aircraft_list:
                # Obtenir le nom de la ville depuis les coordonn√©es
                location = "Inconnu"
                if 'localisation' in aircraft:
                    loc_coords = aircraft['localisation']
                    for airport in self.data_manager.get_airports():
                        if (abs(airport['coordonnees']['latitude'] - loc_coords.get('latitude', 0)) < 0.1 and
                            abs(airport['coordonnees']['longitude'] - loc_coords.get('longitude', 0)) < 0.1):
                            location = f"{airport['ville']} ({airport['code_iata']})"
                            break
                
                values = (
                    aircraft.get('num_id', ''),
                    aircraft.get('modele', ''),
                    aircraft.get('compagnie_aerienne', ''),
                    aircraft.get('capacite', ''),
                    aircraft.get('etat', 'au_sol').replace('_', ' ').title(),
                    location,
                    f"{aircraft.get('autonomie', 0)} km",
                    aircraft.get('derniere_maintenance', 'Jamais')
                )
                
                self.aircraft_tree.insert('', 'end', values=values)
            
            self.notification_center.show_info(f"Avions rafra√Æchis: {len(aircraft_list)} avions")
        except Exception as e:
            self.notification_center.show_error(f"Erreur refresh avions: {e}")
    
    def new_aircraft(self):
        """Cr√©e un nouvel avion"""
        if not AIRCRAFT_MODULE_AVAILABLE:
            self.notification_center.show_error("Module de dialogue avion non disponible")
            return
        
        try:
            dialog = ModernAircraftDialog(self.frame.winfo_toplevel(), self.data_manager, 
                                        notification_center=self.notification_center)
            if dialog.result:
                self.refresh_data()
                self.notification_center.show_success("Nouvel avion cr√©√©")
        except Exception as e:
            self.notification_center.show_error(f"Erreur cr√©ation avion: {e}")
    
    def edit_aircraft(self):
        """Modifie l'avion s√©lectionn√©"""
        selection = self.aircraft_tree.selection()
        if not selection:
            self.notification_center.show_warning("Veuillez s√©lectionner un avion √† modifier")
            return
        
        if not AIRCRAFT_MODULE_AVAILABLE:
            self.notification_center.show_error("Module de dialogue avion non disponible")
            return
        
        try:
            item = self.aircraft_tree.item(selection[0])
            aircraft_id = item['values'][0]
            
            all_aircraft = self.data_manager.get_aircraft()
            aircraft_data = None
            
            for aircraft in all_aircraft:
                if aircraft.get('num_id') == aircraft_id:
                    aircraft_data = aircraft
                    break
            
            if not aircraft_data:
                self.notification_center.show_error(f"Avion {aircraft_id} non trouv√©")
                return
            
            dialog = ModernAircraftDialog(self.frame.winfo_toplevel(), self.data_manager, 
                                        aircraft_data, self.notification_center)
            if dialog.result:
                self.refresh_data()
                self.notification_center.show_success(f"Avion {aircraft_id} modifi√©")
        except Exception as e:
            self.notification_center.show_error(f"Erreur modification avion: {e}")
    
    def aircraft_maintenance(self):
        """G√®re la maintenance de l'avion"""
        selection = self.aircraft_tree.selection()
        if not selection:
            self.notification_center.show_warning("Veuillez s√©lectionner un avion")
            return
        
        try:
            item = self.aircraft_tree.item(selection[0])
            aircraft_id = item['values'][0]
            current_state = item['values'][4]
            
            if self.safe_manager:
                if "Maintenance" in current_state:
                    if messagebox.askyesno("Terminer maintenance", 
                                         f"Terminer la maintenance de l'avion {aircraft_id} ?"):
                        success, message = self.safe_manager.safe_change_aircraft_state(
                            aircraft_id, 'operationnel', "Maintenance termin√©e")
                        if success:
                            self.refresh_data()
                else:
                    if messagebox.askyesno("Programmer maintenance", 
                                         f"Programmer une maintenance pour l'avion {aircraft_id} ?"):
                        success, message = self.safe_manager.safe_change_aircraft_state(
                            aircraft_id, 'en_maintenance', "Maintenance programm√©e")
                        if success:
                            self.refresh_data()
            else:
                self.notification_center.show_warning("Gestionnaire de maintenance non disponible")
                
        except Exception as e:
            self.notification_center.show_error(f"Erreur maintenance: {e}")
    
    def delete_aircraft(self):
        """Supprime l'avion s√©lectionn√©"""
        selection = self.aircraft_tree.selection()
        if not selection:
            self.notification_center.show_warning("Veuillez s√©lectionner un avion √† supprimer")
            return
        
        try:
            item = self.aircraft_tree.item(selection[0])
            aircraft_id = item['values'][0]
            aircraft_model = item['values'][1]
            
            if self.safe_manager:
                # V√©rifier si la suppression est possible
                can_delete, reason = self.safe_manager.can_delete_aircraft(aircraft_id)
                
                if not can_delete:
                    self.notification_center.show_warning(f"Suppression impossible: {reason}")
                    return
                
                if messagebox.askyesno("Confirmation", 
                                      f"Supprimer l'avion {aircraft_id} ({aircraft_model}) ?\n\n"
                                      "Cette action est irr√©versible."):
                    
                    success, message = self.safe_manager.safe_delete_aircraft(aircraft_id)
                    if success:
                        self.refresh_data()
            else:
                self.notification_center.show_error("Gestionnaire s√©curis√© non disponible")
                
        except Exception as e:
            self.notification_center.show_error(f"Erreur suppression: {e}")
    
    def filter_aircraft(self, event=None):
        """Filtre la liste des avions"""
        search_text = self.search_var.get().lower()
        filter_state = self.filter_var.get()
        
        # Vider le tableau
        for item in self.aircraft_tree.get_children():
            self.aircraft_tree.delete(item)
        
        # Recharger avec filtres
        all_aircraft = self.data_manager.get_aircraft()
        filtered_count = 0
        
        for aircraft in all_aircraft:
            # Filtrage par √©tat
            current_state = aircraft.get('etat', 'au_sol')
            state_display = current_state.replace('_', ' ').title()
            
            if filter_state != "Tous" and filter_state.lower() != state_display.lower():
                continue
            
            # Filtrage par recherche
            searchable_text = f"{aircraft.get('num_id', '')} {aircraft.get('modele', '')} {aircraft.get('compagnie_aerienne', '')}".lower()
            if search_text and search_text not in searchable_text:
                continue
            
            # Obtenir la localisation
            location = "Inconnu"
            if 'localisation' in aircraft:
                loc_coords = aircraft['localisation']
                for airport in self.data_manager.get_airports():
                    if (abs(airport['coordonnees']['latitude'] - loc_coords.get('latitude', 0)) < 0.1 and
                        abs(airport['coordonnees']['longitude'] - loc_coords.get('longitude', 0)) < 0.1):
                        location = f"{airport['ville']} ({airport['code_iata']})"
                        break
            
            values = (
                aircraft.get('num_id', ''),
                aircraft.get('modele', ''),
                aircraft.get('compagnie_aerienne', ''),
                aircraft.get('capacite', ''),
                state_display,
                location,
                f"{aircraft.get('autonomie', 0)} km",
                aircraft.get('derniere_maintenance', 'Jamais')
            )
            
            self.aircraft_tree.insert('', 'end', values=values)
            filtered_count += 1
        
        if search_text or filter_state != "Tous":
            self.notification_center.show_info(f"Filtre appliqu√©: {filtered_count} avions affich√©s")


class ExternalTab(BaseTab):
    """Classe pour les onglets externes (modules s√©par√©s)"""
    
    def __init__(self, parent_frame, data_manager, notification_center, 
                 module_available, create_function, refresh_function, tab_title):
        self.module_available = module_available
        self.create_function = create_function
        self.refresh_function = refresh_function
        self.tab_title = tab_title
        self.tree_widget = None
        super().__init__(parent_frame, data_manager, notification_center)
    
    def setup_ui(self):
        """Configure l'interface de l'onglet externe"""
        if not self.module_available:
            raise Exception(f"Module {self.tab_title} non disponible")
        
        try:
            self.tree_widget = self.create_function(self.frame, self.data_manager)
        except Exception as e:
            raise Exception(f"Erreur cr√©ation interface {self.tab_title}: {e}")
    
    def load_data(self):
        """Charge les donn√©es initiales"""
        self.refresh_data()
    
    def refresh_data(self):
        """Rafra√Æchit les donn√©es de l'onglet"""
        if self.tree_widget and self.refresh_function:
            try:
                self.refresh_function(self.tree_widget, self.data_manager)
                self.notification_center.show_info(f"{self.tab_title} rafra√Æchi")
            except Exception as e:
                self.notification_center.show_error(f"Erreur refresh {self.tab_title}: {e}")


class TabManager:
    """Gestionnaire centralis√© des onglets"""
    
    def __init__(self, notebook, data_manager, notification_center):
        self.notebook = notebook
        self.data_manager = data_manager
        self.notification_center = notification_center
        self.tabs = {}
        
        # Configuration des onglets avec v√©rification de disponibilit√©
        self.tab_configs = [
            ('dashboard', 'üìä Tableau de Bord', DashboardTab, True),
            ('aircraft', '‚úàÔ∏è Avions', AircraftTab, True),
            ('flights', 'üõ´ Vols', self._create_flights_tab, FLIGHTS_MODULE_AVAILABLE),
            ('passengers', 'üß≥ Passagers', self._create_passengers_tab, PASSENGERS_MODULE_AVAILABLE),
            ('personnel', 'üë• Personnel', self._create_personnel_tab, PERSONNEL_MODULE_AVAILABLE),
            ('reservations', 'üé´ R√©servations', self._create_reservations_tab, RESERVATIONS_MODULE_AVAILABLE),
        ]
    
    def create_all_tabs(self):
        """Cr√©e tous les onglets disponibles"""
        for tab_id, title, tab_class_or_function, available in self.tab_configs:
            try:
                if not available:
                    print(f"‚ö†Ô∏è Onglet {title} non disponible - module manquant")
                    self._create_unavailable_tab(tab_id, title)
                    continue
                
                if callable(tab_class_or_function) and not (
                    hasattr(tab_class_or_function, '__bases__') and 
                    BaseTab in tab_class_or_function.__bases__
                ):
                    # Fonction de cr√©ation sp√©ciale
                    tab_instance = tab_class_or_function()
                else:
                    # Classe d'onglet standard
                    tab_instance = tab_class_or_function(self.notebook, self.data_manager, self.notification_center)
                
                self.tabs[tab_id] = tab_instance
                self.notebook.add(tab_instance.frame, text=title)
                
                print(f"‚úÖ Onglet {title} cr√©√©")
                
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation onglet {title}: {e}")
                self._create_error_tab(tab_id, title, e)
    
    def _create_flights_tab(self):
        """Cr√©e l'onglet vols"""
        return ExternalTab(self.notebook, self.data_manager, self.notification_center,
                          FLIGHTS_MODULE_AVAILABLE, create_flights_tab_content, 
                          refresh_flights_data, 'Vols')
    
    def _create_passengers_tab(self):
        """Cr√©e l'onglet passagers"""
        return ExternalTab(self.notebook, self.data_manager, self.notification_center,
                          PASSENGERS_MODULE_AVAILABLE, create_passengers_tab_content, 
                          refresh_passengers_data, 'Passagers')
    
    def _create_personnel_tab(self):
        """Cr√©e l'onglet personnel"""
        return ExternalTab(self.notebook, self.data_manager, self.notification_center,
                          PERSONNEL_MODULE_AVAILABLE, create_personnel_tab_content, 
                          refresh_personnel_data, 'Personnel')
    
    def _create_reservations_tab(self):
        """Cr√©e l'onglet r√©servations"""
        return ExternalTab(self.notebook, self.data_manager, self.notification_center,
                          RESERVATIONS_MODULE_AVAILABLE, create_reservations_tab_content, 
                          refresh_reservations_data, 'R√©servations')
    
    def _create_unavailable_tab(self, tab_id, title):
        """Cr√©e un onglet pour module non disponible"""
        unavailable_frame = ttk.Frame(self.notebook)
        
        ttk.Label(unavailable_frame, text="üì¶", font=('Arial', 48), foreground='orange').pack(pady=20)
        ttk.Label(unavailable_frame, text=f"Module {title} non disponible", 
                 font=('Arial', 16, 'bold'), foreground='orange').pack()
        ttk.Label(unavailable_frame, text="Le module correspondant n'a pas pu √™tre charg√©.", 
                 font=('Arial', 10), foreground='gray').pack(pady=10)
        
        ttk.Button(unavailable_frame, text="üîÑ R√©essayer", 
                  command=lambda: self._retry_tab(tab_id, title)).pack(pady=10)
        
        self.notebook.add(unavailable_frame, text=f"üì¶ {title}")
    
    def _create_error_tab(self, tab_id, title, error):
        """Cr√©e un onglet d'erreur"""
        error_frame = ttk.Frame(self.notebook)
        
        ttk.Label(error_frame, text="‚ö†Ô∏è", font=('Arial', 48), foreground='red').pack(pady=20)
        ttk.Label(error_frame, text=f"Erreur: {title}", font=('Arial', 16, 'bold'), foreground='red').pack()
        ttk.Label(error_frame, text=str(error), font=('Arial', 10), foreground='gray', wraplength=400).pack(pady=10)
        
        ttk.Button(error_frame, text="üîÑ R√©essayer", 
                  command=lambda: self._retry_tab(tab_id, title)).pack(pady=10)
        
        self.notebook.add(error_frame, text=f"‚ùå {title}")
    
    def _retry_tab(self, tab_id, title):
        """Retente la cr√©ation d'un onglet"""
        # Trouver l'index de l'onglet
        for i, (config_id, config_title, _, _) in enumerate(self.tab_configs):
            if config_id == tab_id:
                tab_index = i
                break
        else:
            return
        
        # Supprimer l'onglet actuel
        self.notebook.forget(tab_index)
        
        # Recr√©er l'onglet
        config_id, config_title, tab_class_or_function, available = self.tab_configs[tab_index]
        try:
            if not available:
                self._create_unavailable_tab(tab_id, config_title)
                return
            
            if callable(tab_class_or_function) and not (
                hasattr(tab_class_or_function, '__bases__') and 
                BaseTab in tab_class_or_function.__bases__
            ):
                tab_instance = tab_class_or_function()
            else:
                tab_instance = tab_class_or_function(self.notebook, self.data_manager, self.notification_center)
            
            self.tabs[tab_id] = tab_instance
            self.notebook.insert(tab_index, tab_instance.frame, text=config_title)
            self.notification_center.show_success(f"Onglet {config_title} recharg√©")
            
        except Exception as e:
            self._create_error_tab(tab_id, config_title, e)
            self.notification_center.show_error(f"√âchec rechargement {config_title}")
    
    def refresh_all_tabs(self):
        """Rafra√Æchit tous les onglets charg√©s"""
        refreshed_count = 0
        for tab_id, tab_instance in self.tabs.items():
            if hasattr(tab_instance, 'refresh_data') and tab_instance.is_loaded:
                try:
                    tab_instance.refresh_data()
                    refreshed_count += 1
                except Exception as e:
                    print(f"‚ùå Erreur refresh onglet {tab_id}: {e}")
        
        self.notification_center.show_success(f"{refreshed_count} onglets rafra√Æchis")
    
    def get_tab(self, tab_id):
        """R√©cup√®re une instance d'onglet"""
        return self.tabs.get(tab_id)


class KeyboardManager:
    """Gestionnaire des raccourcis clavier"""
    
    def __init__(self, root, main_window):
        self.root = root
        self.main_window = main_window
        self.setup_bindings()
    
    def setup_bindings(self):
        """Configure les raccourcis clavier"""
        # Raccourcis globaux
        self.root.bind('<Control-r>', lambda e: self.main_window.refresh_all_data())
        self.root.bind('<F5>', lambda e: self.main_window.refresh_all_data())
        self.root.bind('<Control-s>', lambda e: self.main_window.save_all_data())
        self.root.bind('<Control-q>', lambda e: self.main_window.on_closing())
        self.root.bind('<Control-h>', lambda e: self.show_help())
        
        # Navigation entre onglets
        for i in range(1, 7):
            self.root.bind(f'<Control-{i}>', lambda e, idx=i-1: self.select_tab(idx))
        
        # Nouveaux √©l√©ments
        self.root.bind('<Control-n>', lambda e: self.new_element())
        self.root.bind('<Control-e>', lambda e: self.edit_element())
        self.root.bind('<Delete>', lambda e: self.delete_element())
        
        print("‚å®Ô∏è Raccourcis clavier configur√©s")
    
    def select_tab(self, index):
        """S√©lectionne un onglet par index"""
        try:
            if index < self.main_window.notebook.index('end'):
                self.main_window.notebook.select(index)
                self.main_window.notification_center.show_info(f"Onglet {index + 1} s√©lectionn√©")
        except:
            pass
    
    def new_element(self):
        """Cr√©e un nouvel √©l√©ment selon l'onglet actuel"""
        try:
            current_tab_index = self.main_window.notebook.index('current')
            tab_configs = ['dashboard', 'aircraft', 'flights', 'passengers', 'personnel', 'reservations']
            
            if current_tab_index < len(tab_configs):
                tab_id = tab_configs[current_tab_index]
                tab_instance = self.main_window.tab_manager.get_tab(tab_id)
                
                if hasattr(tab_instance, 'new_aircraft') and tab_id == 'aircraft':
                    tab_instance.new_aircraft()
                else:
                    self.main_window.notification_center.show_info("Fonction non disponible pour cet onglet")
        except Exception as e:
            self.main_window.notification_center.show_error(f"Erreur cr√©ation: {e}")
    
    def edit_element(self):
        """Modifie l'√©l√©ment s√©lectionn√© selon l'onglet actuel"""
        try:
            current_tab_index = self.main_window.notebook.index('current')
            tab_configs = ['dashboard', 'aircraft', 'flights', 'passengers', 'personnel', 'reservations']
            
            if current_tab_index < len(tab_configs):
                tab_id = tab_configs[current_tab_index]
                tab_instance = self.main_window.tab_manager.get_tab(tab_id)
                
                if hasattr(tab_instance, 'edit_aircraft') and tab_id == 'aircraft':
                    tab_instance.edit_aircraft()
                else:
                    self.main_window.notification_center.show_info("Fonction non disponible pour cet onglet")
        except Exception as e:
            self.main_window.notification_center.show_error(f"Erreur modification: {e}")
    
    def delete_element(self):
        """Supprime l'√©l√©ment s√©lectionn√© selon l'onglet actuel"""
        try:
            current_tab_index = self.main_window.notebook.index('current')
            tab_configs = ['dashboard', 'aircraft', 'flights', 'passengers', 'personnel', 'reservations']
            
            if current_tab_index < len(tab_configs):
                tab_id = tab_configs[current_tab_index]
                tab_instance = self.main_window.tab_manager.get_tab(tab_id)
                
                if hasattr(tab_instance, 'delete_aircraft') and tab_id == 'aircraft':
                    tab_instance.delete_aircraft()
                else:
                    self.main_window.notification_center.show_info("Fonction non disponible pour cet onglet")
        except Exception as e:
            self.main_window.notification_center.show_error(f"Erreur suppression: {e}")
    
    def show_help(self):
        """Affiche l'aide des raccourcis clavier"""
        help_text = """üìñ RACCOURCIS CLAVIER

üîÑ ACTIONS GLOBALES:
‚Ä¢ Ctrl+R ou F5 : Actualiser les donn√©es
‚Ä¢ Ctrl+S : Sauvegarder
‚Ä¢ Ctrl+H : Afficher cette aide
‚Ä¢ Ctrl+Q : Quitter l'application

üóÇÔ∏è NAVIGATION:
‚Ä¢ Ctrl+1 √† Ctrl+6 : Basculer entre les onglets
‚Ä¢ Ctrl+N : Nouveau (dans l'onglet actuel)
‚Ä¢ Ctrl+E : Modifier (√©l√©ment s√©lectionn√©)
‚Ä¢ Suppr : Supprimer (√©l√©ment s√©lectionn√©)

üí° ASTUCES:
‚Ä¢ Double-clic pour modifier un √©l√©ment
‚Ä¢ Utilisez les champs de recherche pour filtrer
‚Ä¢ Les modifications sont sauvegard√©es automatiquement"""

        messagebox.showinfo("Aide - Raccourcis Clavier", help_text)


class ThemeManager:
    """Gestionnaire de th√®mes pour l'interface"""
    
    def __init__(self, root):
        self.root = root
        self.current_theme = "default"
        self.themes = {
            "default": {
                "bg": "#ffffff",
                "fg": "#000000",
                "select_bg": "#0078d4",
                "select_fg": "#ffffff"
            },
            "dark": {
                "bg": "#2d2d2d",
                "fg": "#ffffff", 
                "select_bg": "#404040",
                "select_fg": "#ffffff"
            }
        }
        
        self.setup_styles()
    
    def setup_styles(self):
        """Configure les styles par d√©faut"""
        self.style = ttk.Style()
        
        # Styles personnalis√©s
        self.style.configure('Action.TButton', padding=(10, 5), font=('Arial', 9, 'bold'))
        self.style.configure('Danger.TButton', foreground='red', font=('Arial', 9, 'bold'))
        self.style.configure('Success.TButton', foreground='green', font=('Arial', 9, 'bold'))
        
        # Styles pour les statistiques
        self.style.configure('Stat.TLabel', font=('Arial', 12, 'bold'))
        self.style.configure('Value.TLabel', font=('Arial', 14, 'bold'), foreground='blue')
        
        print("üé® Th√®mes et styles configur√©s")
    
    def switch_theme(self, theme_name):
        """Change le th√®me de l'interface"""
        if theme_name not in self.themes:
            return False
        
        self.current_theme = theme_name
        theme = self.themes[theme_name]
        
        # Appliquer le th√®me (simplifi√© pour tkinter/ttk)
        try:
            if theme_name == "dark":
                self.style.theme_use('clam')  # Th√®me sombre si disponible
            else:
                self.style.theme_use('default')
            
            print(f"üé® Th√®me chang√©: {theme_name}")
            return True
        except:
            print(f"‚ùå Erreur changement th√®me: {theme_name}")
            return False


class MainWindow:
    """Fen√™tre principale de l'application - VERSION INT√âGR√âE"""
    
    def __init__(self):
        """Initialise la fen√™tre principale"""
        self.root = tk.Tk()
        self.root.title("Syst√®me de Gestion A√©rienne - Interface Moderne")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # Configuration de l'ic√¥ne (si disponible)
        try:
            # self.root.iconbitmap("icon.ico")  # D√©comment√© si vous avez une ic√¥ne
            pass
        except:
            pass
        
        # Gestionnaire de donn√©es
        self.data_manager = DataManager()
        
        # Variables d'interface
        self.status_var = tk.StringVar(value="Application pr√™te")
        
        # Gestionnaires
        self.notification_center = NotificationCenter(self.status_var, self.root)
        self.theme_manager = ThemeManager(self.root)
        self.keyboard_manager = KeyboardManager(self.root, self)
        
        # Configuration de l'interface
        self.setup_ui()
        
        # Chargement initial des donn√©es
        self.root.after(100, self.initial_load)
        
        print("üñ•Ô∏è Interface principale initialis√©e avec modules int√©gr√©s")
    
    def setup_ui(self):
        """Configure l'interface utilisateur principale"""
        # Frame principal
        main_frame = ttk.Frame(self.root)
        main_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        
        # Barre sup√©rieure avec actions et informations
        self.create_enhanced_toolbar(main_frame)
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=1, column=0, sticky="nsew", pady=(10, 0))
        
        main_frame.grid_rowconfigure(1, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # Gestionnaire d'onglets
        self.tab_manager = TabManager(self.notebook, self.data_manager, self.notification_center)
        
        # Barre de statut am√©lior√©e
        self.create_enhanced_status_bar(main_frame)
    
    def create_enhanced_toolbar(self, parent):
        """Cr√©e la barre d'outils am√©lior√©e"""
        toolbar_frame = ttk.LabelFrame(parent, text="üéõÔ∏è Actions Principales", padding=10)
        toolbar_frame.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        
        # Section gauche - Actions principales
        left_frame = ttk.Frame(toolbar_frame)
        left_frame.grid(row=0, column=0, sticky="w")
        
        ttk.Button(left_frame, text="üîÑ Actualiser", 
                  command=self.refresh_all_data, 
                  style='Action.TButton').grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(left_frame, text="üìä Statistiques", 
                  command=self.show_enhanced_statistics, 
                  style='Action.TButton').grid(row=0, column=1, padx=(0, 10))
        
        ttk.Button(left_frame, text="üíæ Sauvegarder", 
                  command=self.save_all_data, 
                  style='Success.TButton').grid(row=0, column=2, padx=(0, 10))
        
        ttk.Button(left_frame, text="üé® Th√®me", 
                  command=self.toggle_theme).grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(left_frame, text="‚å®Ô∏è Aide", 
                  command=self.keyboard_manager.show_help).grid(row=0, column=4, padx=(0, 20))
        
        # Section centre - Indicateurs de performance
        center_frame = ttk.Frame(toolbar_frame)
        center_frame.grid(row=0, column=1, sticky="ew", padx=20)
        
        # Indicateur de charge syst√®me
        self.load_var = tk.StringVar(value="üíö Syst√®me OK")
        load_label = ttk.Label(center_frame, textvariable=self.load_var, 
                              font=('Arial', 10, 'bold'))
        load_label.grid(row=0, column=0, padx=10)
        
        # Indicateur de donn√©es
        self.data_status_var = tk.StringVar(value="üíæ Donn√©es OK")
        data_label = ttk.Label(center_frame, textvariable=self.data_status_var, 
                              font=('Arial', 10, 'bold'))
        data_label.grid(row=0, column=1, padx=10)
        
        # Section droite - Horloge et informations
        right_frame = ttk.Frame(toolbar_frame)
        right_frame.grid(row=0, column=2, sticky="e")
        
        # Horloge syst√®me
        clock_frame = ttk.LabelFrame(right_frame, text="üïê Syst√®me", padding=5)
        clock_frame.grid(row=0, column=0, padx=(0, 10), sticky="e")
        
        self.clock_var = tk.StringVar()
        clock_label = ttk.Label(clock_frame, textvariable=self.clock_var,
                               font=('Arial', 12, 'bold'),
                               foreground='blue')
        clock_label.pack()
        
        # Mode d'interface
        mode_label = ttk.Label(right_frame, text="Mode: Int√©gr√©", 
                              font=('Arial', 10), foreground='green')
        mode_label.grid(row=0, column=1, sticky="e")
        
        # Configuration responsive
        toolbar_frame.grid_columnconfigure(1, weight=1)
        
        # D√©marrer l'horloge
        self.update_clock()
        self.update_system_status()
    
    def create_enhanced_status_bar(self, parent):
        """Cr√©e la barre de statut am√©lior√©e"""
        status_frame = ttk.Frame(parent, relief="sunken", borderwidth=1)
        status_frame.grid(row=2, column=0, sticky="ew", pady=(10, 0))
        
        # Section gauche - Statut principal
        ttk.Label(status_frame, textvariable=self.status_var, 
                 font=('Arial', 10)).grid(row=0, column=0, sticky="w", padx=5)
        
        # Section centre - Informations rapides
        self.quick_info_var = tk.StringVar(value="")
        ttk.Label(status_frame, textvariable=self.quick_info_var,
                 font=('Arial', 9), foreground='gray').grid(row=0, column=1, sticky="w", padx=20)
        
        # Section droite - Informations techniques
        modules_status = []
        if FLIGHTS_MODULE_AVAILABLE:
            modules_status.append("Vols")
        if PASSENGERS_MODULE_AVAILABLE:
            modules_status.append("Passagers")
        if PERSONNEL_MODULE_AVAILABLE:
            modules_status.append("Personnel")
        if RESERVATIONS_MODULE_AVAILABLE:
            modules_status.append("R√©servations")
        if AIRCRAFT_MODULE_AVAILABLE:
            modules_status.append("Avions")
        
        tech_info = f"Modules: {', '.join(modules_status) if modules_status else 'Aucun'}"
        ttk.Label(status_frame, text=tech_info,
                 font=('Arial', 9), foreground='gray').grid(row=0, column=2, sticky="e", padx=5)
        
        status_frame.grid_columnconfigure(1, weight=1)
    
    def initial_load(self):
        """Chargement initial de l'interface"""
        try:
            self.notification_center.show_progress("Initialisation de l'interface...")
            
            # Cr√©er tous les onglets
            self.tab_manager.create_all_tabs()
            
            # Chargement initial des donn√©es
            self.refresh_all_data()
            
            self.notification_center.show_success("Interface initialis√©e avec succ√®s")
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur initialisation: {e}")
    
    def update_clock(self):
        """Met √† jour l'horloge syst√®me"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.clock_var.set(current_time)
        self.root.after(1000, self.update_clock)
    
    def update_system_status(self):
        """Met √† jour les indicateurs syst√®me"""
        try:
            # V√©rifier l'√©tat des donn√©es
            aircraft_count = len(self.data_manager.get_aircraft())
            personnel_count = len(self.data_manager.get_personnel())
            flights_count = len(self.data_manager.get_flights())
            passengers_count = len(self.data_manager.get_passengers())
            reservations_count = len(self.data_manager.get_reservations())
            
            total_elements = aircraft_count + personnel_count + flights_count + passengers_count + reservations_count
            
            if total_elements > 0:
                self.data_status_var.set("üíæ Donn√©es OK")
                self.load_var.set("üíö Syst√®me OK")
            else:
                self.data_status_var.set("üíæ Aucune donn√©e")
                self.load_var.set("üü° Donn√©es vides")
            
            # Informations rapides
            if total_elements > 0:
                self.quick_info_var.set(f"üìä {total_elements} √©l√©ments charg√©s")
            else:
                self.quick_info_var.set("Aucune donn√©e charg√©e")
            
        except Exception as e:
            self.data_status_var.set("‚ùå Erreur donn√©es")
            self.load_var.set("üî¥ Erreur syst√®me")
            print(f"‚ùå Erreur statut syst√®me: {e}")
        
        # Programmer la prochaine mise √† jour
        self.root.after(5000, self.update_system_status)
    
    def toggle_theme(self):
        """Bascule entre les th√®mes"""
        current = self.theme_manager.current_theme
        new_theme = "dark" if current == "default" else "default"
        
        if self.theme_manager.switch_theme(new_theme):
            self.notification_center.show_success(f"Th√®me chang√©: {new_theme}")
        else:
            self.notification_center.show_warning("Impossible de changer le th√®me")
    
    def show_enhanced_statistics(self):
        """Affiche les statistiques am√©lior√©es"""
        try:
            aircraft_count = len(self.data_manager.get_aircraft())
            personnel_count = len(self.data_manager.get_personnel())
            flights_count = len(self.data_manager.get_flights())
            passengers_count = len(self.data_manager.get_passengers())
            reservations_count = len(self.data_manager.get_reservations())
            
            # Statistiques avanc√©es
            aircraft_list = self.data_manager.get_aircraft()
            operational_aircraft = sum(1 for a in aircraft_list if a.get('etat') in ['operationnel', 'au_sol'])
            maintenance_aircraft = sum(1 for a in aircraft_list if a.get('etat') == 'en_maintenance')
            
            # Calcul capacit√© totale
            total_capacity = sum(a.get('capacite', 0) for a in aircraft_list)
            
            # Modules disponibles
            available_modules = []
            if FLIGHTS_MODULE_AVAILABLE:
                available_modules.append("‚úÖ Vols")
            else:
                available_modules.append("‚ùå Vols")
            
            if PASSENGERS_MODULE_AVAILABLE:
                available_modules.append("‚úÖ Passagers")
            else:
                available_modules.append("‚ùå Passagers")
            
            if PERSONNEL_MODULE_AVAILABLE:
                available_modules.append("‚úÖ Personnel")
            else:
                available_modules.append("‚ùå Personnel")
            
            if RESERVATIONS_MODULE_AVAILABLE:
                available_modules.append("‚úÖ R√©servations")
            else:
                available_modules.append("‚ùå R√©servations")
            
            if AIRCRAFT_MODULE_AVAILABLE:
                available_modules.append("‚úÖ Avions")
            else:
                available_modules.append("‚ùå Avions")
            
            stats_text = f"""üìä STATISTIQUES D√âTAILL√âES

‚úàÔ∏è FLOTTE ({aircraft_count} avions):
‚Ä¢ Op√©rationnels : {operational_aircraft}
‚Ä¢ En maintenance : {maintenance_aircraft}
‚Ä¢ Capacit√© totale : {total_capacity:,} passagers

üë• PERSONNEL : {personnel_count} employ√©s

üõ´ OP√âRATIONS :
‚Ä¢ Vols planifi√©s : {flights_count}
‚Ä¢ Passagers enregistr√©s : {passengers_count}
‚Ä¢ R√©servations actives : {reservations_count}

üì¶ MODULES DISPONIBLES :
{chr(10).join(available_modules)}

üìà PERFORMANCE :
‚Ä¢ Taux d'utilisation flotte : {(operational_aircraft/max(aircraft_count, 1)*100):.1f}%
‚Ä¢ Ratio passagers/capacit√© : {(passengers_count/max(total_capacity, 1)*100):.1f}%

üïê Derni√®re mise √† jour : {datetime.now().strftime('%H:%M:%S')}
üìÖ Date : {datetime.now().strftime('%Y-%m-%d')}"""
            
            messagebox.showinfo("Statistiques D√©taill√©es", stats_text)
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur calcul statistiques: {e}")
    
    def save_all_data(self):
        """Force la sauvegarde avec feedback am√©lior√©"""
        try:
            self.notification_center.show_progress("Sauvegarde en cours...")
            
            # Simuler un d√©lai de sauvegarde pour le feedback
            self.root.after(500, self._complete_save)
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur sauvegarde: {e}")
    
    def _complete_save(self):
        """Compl√®te la sauvegarde"""
        try:
            # La sauvegarde est automatique avec DataManager
            self.notification_center.show_success("Donn√©es sauvegard√©es avec succ√®s")
            messagebox.showinfo("Sauvegarde", "Toutes les donn√©es ont √©t√© sauvegard√©es.")
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur finalisation sauvegarde: {e}")
    
    def refresh_all_data(self):
        """Rafra√Æchit toutes les donn√©es avec feedback am√©lior√©"""
        try:
            self.notification_center.show_progress("Actualisation globale en cours...")
            
            # Rafra√Æchir tous les onglets
            self.tab_manager.refresh_all_tabs()
            
            # Mettre √† jour les indicateurs syst√®me
            self.update_system_status()
            
            print("‚úÖ Rafra√Æchissement global termin√©")
            
        except Exception as e:
            self.notification_center.show_error(f"Erreur rafra√Æchissement: {e}")
    
    def run(self):
        """Lance l'application avec gestion d'erreurs am√©lior√©e"""
        try:
            # Gestionnaire de fermeture
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            
            # Message de bienvenue
            self.notification_center.show_info("Bienvenue dans le syst√®me de gestion a√©rienne")
            
            # Lancer la boucle principale
            self.root.mainloop()
            
        except KeyboardInterrupt:
            print("\nüõë Interruption clavier d√©tect√©e")
            self.on_closing()
        except Exception as e:
            print(f"‚ùå Erreur critique: {e}")
            messagebox.showerror("Erreur Critique", f"Une erreur critique s'est produite:\n{e}")
            self.on_closing()
    
    def on_closing(self):
        """Gestionnaire de fermeture am√©lior√©"""
        try:
            if messagebox.askyesno("Quitter", 
                                  "Voulez-vous vraiment quitter l'application ?\n\n"
                                  "Les donn√©es seront sauvegard√©es automatiquement."):
                
                self.notification_center.show_progress("Fermeture en cours...")
                
                # Sauvegarder une derni√®re fois
                print("üíæ Sauvegarde finale...")
                
                # Nettoyer les ressources
                if hasattr(self, 'tab_manager'):
                    del self.tab_manager
                
                print("üßπ Nettoyage termin√©")
                
                # Fermer l'application
                self.root.destroy()
                print("üëã Application ferm√©e proprement")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la fermeture: {e}")
            self.root.destroy()


if __name__ == "__main__":
    try:
        app = MainWindow()
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        messagebox.showerror("Erreur Fatale", f"Impossible de d√©marrer l'application:\n{e}")
        sys.exit(1)