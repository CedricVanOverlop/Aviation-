"""
Dashboard Tab - Tableau de bord statique
Fichier: src/interfaces/tabs/dashboard_tab.py

Version nettoy√©e sans simulation temps r√©el ni threading.
"""

import tkinter as tk
from tkinter import ttk
import sys
import os
from datetime import datetime

# Ajouter le chemin du module Core
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

class SimpleDashboard:
    """Tableau de bord principal statique (sans simulation temps r√©el)"""
    
    def __init__(self, parent_frame, data_manager):
        """
        Initialise le tableau de bord.
        
        Args:
            parent_frame: Frame parent Tkinter
            data_manager: Gestionnaire de donn√©es
        """
        self.parent_frame = parent_frame
        self.data_manager = data_manager
        
        # Variables pour les statistiques
        self.stat_vars = {}
        self.widgets = {}
        
        # Configuration des couleurs du th√®me moderne
        self.colors = {
            'primary': '#1E3A8A',      # Bleu professionnel
            'secondary': '#7C3AED',    # Violet moderne
            'success': '#059669',      # Vert succ√®s
            'warning': '#D97706',      # Orange attention
            'danger': '#DC2626',       # Rouge danger
            'info': '#0284C7',         # Bleu information
            'light': '#F1F5F9',        # Gris clair
            'dark': '#1E293B',         # Gris fonc√©
            'background': '#FFFFFF',   # Blanc
            'border': '#E2E8F0',       # Bordure grise
            'accent': '#10B981',       # Vert accent
            'surface': '#F8FAFC'       # Surface claire
        }
        
        # Configuration du layout
        self.setup_dashboard()
        self.load_initial_data()
        
        print("‚úÖ Dashboard statique initialis√© avec succ√®s")
    
    def setup_dashboard(self):
        """Configure l'interface compl√®te du dashboard"""
        # Configuration du scrolling pour le dashboard
        self.setup_scrollable_container()
        
        # Cr√©ation des diff√©rentes sections
        self.create_header_section()           # En-t√™te avec informations syst√®me
        self.create_kpi_section()             # Indicateurs cl√©s de performance
        self.create_data_overview_section()   # Vue d'ensemble des donn√©es
        self.create_fleet_section()           # √âtat de la flotte
        self.create_recent_activity_section() # Activit√© r√©cente
    
    def setup_scrollable_container(self):
        """Configure le conteneur avec d√©filement"""
        # Canvas principal pour le d√©filement
        self.canvas = tk.Canvas(self.parent_frame, bg=self.colors['background'])
        self.scrollbar = ttk.Scrollbar(self.parent_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)
        
        # Configuration du d√©filement
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        # Placement dans la grille
        self.canvas.grid(row=0, column=0, sticky="nsew")
        self.scrollbar.grid(row=0, column=1, sticky="ns")
        
        # Configuration responsive
        self.parent_frame.grid_rowconfigure(0, weight=1)
        self.parent_frame.grid_columnconfigure(0, weight=1)
        
        # Configuration de la molette de souris
        self.canvas.bind("<MouseWheel>", self._on_mousewheel)
        self.scrollable_frame.bind("<MouseWheel>", self._on_mousewheel)
    
    def _on_mousewheel(self, event):
        """Gestionnaire de la molette de souris"""
        self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_header_section(self):
        """Cr√©e la section d'en-t√™te avec titre et informations syst√®me"""
        header_frame = ttk.Frame(self.scrollable_frame)
        header_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=20)
        
        # Configuration responsive
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Section gauche - Titre et informations syst√®me
        left_frame = ttk.Frame(header_frame)
        left_frame.grid(row=0, column=0, sticky="w")
        
        # Titre principal avec ic√¥ne
        title_label = ttk.Label(left_frame, 
                               text="üè¢ Tableau de Bord A√©roportuaire",
                               font=('Arial', 24, 'bold'),
                               foreground=self.colors['primary'])
        title_label.grid(row=0, column=0, sticky="w")
        
        subtitle_label = ttk.Label(left_frame,
                                  text="Vue d'ensemble des op√©rations",
                                  font=('Arial', 12),
                                  foreground=self.colors['dark'])
        subtitle_label.grid(row=1, column=0, sticky="w")
        
        # Section droite - Informations syst√®me
        right_frame = ttk.Frame(header_frame)
        right_frame.grid(row=0, column=1, sticky="e")
        
        # Horloge syst√®me
        clock_frame = ttk.LabelFrame(right_frame, text="üïê Informations", padding=10)
        clock_frame.grid(row=0, column=0, padx=(0, 10), sticky="e")
        
        # Horloge syst√®me
        self.system_clock_var = tk.StringVar()
        ttk.Label(clock_frame, text="Heure syst√®me:").grid(row=0, column=0, sticky="w")
        clock_label = ttk.Label(clock_frame, textvariable=self.system_clock_var,
                               font=('Arial', 12, 'bold'),
                               foreground=self.colors['primary'])
        clock_label.grid(row=0, column=1, sticky="e", padx=(5, 0))
        
        # Type d'interface
        ttk.Label(clock_frame, text="Mode:").grid(row=1, column=0, sticky="w")
        mode_label = ttk.Label(clock_frame, text="Statique",
                              font=('Arial', 12, 'bold'),
                              foreground=self.colors['success'])
        mode_label.grid(row=1, column=1, sticky="e", padx=(5, 0))
        
        # Derni√®re mise √† jour
        self.last_update_var = tk.StringVar()
        ttk.Label(clock_frame, text="Derni√®re M√†J:").grid(row=2, column=0, sticky="w")
        update_label = ttk.Label(clock_frame, textvariable=self.last_update_var,
                                font=('Arial', 10),
                                foreground=self.colors['info'])
        update_label.grid(row=2, column=1, sticky="e", padx=(5, 0))
        
        # Mettre √† jour les informations
        self.update_header_info()

    def create_kpi_section(self):
        """Cr√©e la section des indicateurs de performance cl√©s"""
        kpi_frame = ttk.LabelFrame(self.scrollable_frame, text="üìä Indicateurs Cl√©s", padding=20)
        kpi_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        
        # Configuration responsive - 4 colonnes
        for i in range(4):
            kpi_frame.grid_columnconfigure(i, weight=1)
        
        # D√©finition des KPI principaux (statiques)
        kpis = [
            # Premi√®re ligne - Donn√©es principales
            ("Total Avions", "0", "üõ©Ô∏è", "primary", "Nombre total d'avions enregistr√©s", 0, 0),
            ("Total Personnel", "0", "üë®‚Äç‚úàÔ∏è", "secondary", "Personnel enregistr√©", 0, 1),
            ("Total Vols", "0", "üõ´", "info", "Vols programm√©s", 0, 2),
            ("Total Passagers", "0", "üë•", "accent", "Passagers enregistr√©s", 0, 3),
            
            # Deuxi√®me ligne - Donn√©es compl√©mentaires
            ("R√©servations", "0", "üé´", "warning", "R√©servations actives", 1, 0),
            ("Avions Op√©rationnels", "0", "‚úÖ", "success", "Avions en service", 1, 1),
            ("Personnel Disponible", "0", "üü¢", "primary", "Personnel disponible", 1, 2),
            ("√âtat Syst√®me", "OK", "üíæ", "success", "√âtat de la base de donn√©es", 1, 3),
        ]
        
        # Cr√©ation des cartes KPI
        for title, value, icon, color, tooltip, row, col in kpis:
            self.create_kpi_card(kpi_frame, title, value, icon, color, tooltip, row, col)
    
    def create_kpi_card(self, parent, title, value, icon, color, tooltip, row, col):
        """Cr√©e une carte KPI moderne"""
        # Frame principale de la carte avec effet d'ombre
        card_frame = ttk.Frame(parent, relief="raised", borderwidth=2, padding=15)
        card_frame.grid(row=row, column=col, padx=8, pady=8, sticky="ew")
        
        # Configuration
        card_frame.grid_columnconfigure(0, weight=1)
        
        # En-t√™te avec ic√¥ne et titre
        header_frame = ttk.Frame(card_frame)
        header_frame.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Ic√¥ne grande
        icon_label = ttk.Label(header_frame, text=icon, font=('Arial', 20))
        icon_label.grid(row=0, column=0, sticky="w")
        
        # Titre et description
        title_label = ttk.Label(header_frame, text=title, 
                               font=('Arial', 11, 'bold'),
                               foreground=self.colors['dark'])
        title_label.grid(row=0, column=1, sticky="w", padx=(10, 0))
        
        # Valeur principale (tr√®s grande et color√©e)
        value_var = tk.StringVar(value=value)
        value_label = ttk.Label(card_frame, textvariable=value_var,
                               font=('Arial', 18, 'bold'),
                               foreground=self.colors.get(color, self.colors['primary']))
        value_label.grid(row=1, column=0, pady=(0, 5))
        
        # Information suppl√©mentaire
        info_var = tk.StringVar(value="")
        info_label = ttk.Label(card_frame, textvariable=info_var,
                              font=('Arial', 9),
                              foreground=self.colors['secondary'])
        info_label.grid(row=2, column=0)
        
        # Stocker les variables pour mises √† jour
        self.stat_vars[title] = {
            'value': value_var,
            'info': info_var
        }
        
        return card_frame
    
    def create_data_overview_section(self):
        """Cr√©e la section de vue d'ensemble des donn√©es"""
        overview_frame = ttk.LabelFrame(self.scrollable_frame, text="üìã Vue d'Ensemble", padding=20)
        overview_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
        
        # Configuration en 2 colonnes
        overview_frame.grid_columnconfigure((0, 1), weight=1)
        
        # R√©partition des donn√©es
        data_frame = ttk.LabelFrame(overview_frame, text="üìä R√©partition", padding=10)
        data_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        
        self.data_text = tk.Text(data_frame, height=8, width=40,
                                font=('Arial', 10), bg=self.colors['light'],
                                relief="sunken", bd=1, wrap=tk.WORD)
        self.data_text.pack(fill="both", expand=True)
        
        # √âtat des ressources
        resources_frame = ttk.LabelFrame(overview_frame, text="üîß Ressources", padding=10)
        resources_frame.grid(row=0, column=1, sticky="nsew", padx=(10, 0))
        
        self.resources_text = tk.Text(resources_frame, height=8, width=40,
                                     font=('Arial', 10), bg=self.colors['light'],
                                     relief="sunken", bd=1, wrap=tk.WORD)
        self.resources_text.pack(fill="both", expand=True)
        
        # Configuration responsive
        data_frame.grid_columnconfigure(0, weight=1)
        resources_frame.grid_columnconfigure(0, weight=1)
    
    def create_fleet_section(self):
        """Cr√©e la section de l'√©tat de la flotte"""
        fleet_frame = ttk.LabelFrame(self.scrollable_frame, text="üõ©Ô∏è √âtat de la Flotte", padding=20)
        fleet_frame.grid(row=3, column=0, sticky="ew", padx=20, pady=10)
        
        # Tableau simplifi√© de la flotte
        columns = ('ID', 'Mod√®le', 'Compagnie', 'Capacit√©', '√âtat', 'Localisation')
        self.fleet_tree = ttk.Treeview(fleet_frame, columns=columns, 
                                      show='headings', height=6)
        
        for col in columns:
            self.fleet_tree.heading(col, text=col)
            self.fleet_tree.column(col, width=120, anchor="center")
        
        self.fleet_tree.grid(row=0, column=0, sticky="ew")
        
        # Scrollbar pour la flotte
        fleet_scroll = ttk.Scrollbar(fleet_frame, orient="vertical", 
                                    command=self.fleet_tree.yview)
        fleet_scroll.grid(row=0, column=1, sticky="ns")
        self.fleet_tree.configure(yscrollcommand=fleet_scroll.set)
        
        # Configuration responsive
        fleet_frame.grid_columnconfigure(0, weight=1)
    
    def create_recent_activity_section(self):
        """Cr√©e la section d'activit√© r√©cente"""
        activity_frame = ttk.LabelFrame(self.scrollable_frame, text="üìù Informations Syst√®me", padding=20)
        activity_frame.grid(row=4, column=0, sticky="ew", padx=20, pady=(10, 20))
        
        # Zone de texte pour les informations
        self.activity_text = tk.Text(activity_frame, height=10, width=100,
                                   font=('Consolas', 9), bg=self.colors['light'],
                                   fg='black', relief="sunken", bd=2, wrap=tk.WORD)
        self.activity_text.grid(row=0, column=0, sticky="ew")
        
        # Scrollbar pour les informations
        activity_scrollbar = ttk.Scrollbar(activity_frame, orient="vertical",
                                         command=self.activity_text.yview)
        activity_scrollbar.grid(row=0, column=1, sticky="ns")
        self.activity_text.configure(yscrollcommand=activity_scrollbar.set)
        
        # Ajout d'informations syst√®me
        self.add_system_info()
        
        # Configuration responsive
        activity_frame.grid_columnconfigure(0, weight=1)
    
    def add_system_info(self):
        """Ajoute des informations syst√®me"""
        info_text = f"""=== INFORMATIONS SYST√àME ===

üìÖ Date de d√©marrage : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîß Mode de fonctionnement : Interface statique
üíæ Base de donn√©es : Op√©rationnelle
üîÑ Auto-refresh : D√©sactiv√© (mode manuel)

=== ACTIONS DISPONIBLES ===

‚Ä¢ Utiliser le bouton "Actualiser" pour mettre √† jour les donn√©es
‚Ä¢ Naviguer entre les onglets pour g√©rer les diff√©rentes entit√©s
‚Ä¢ Toutes les modifications sont sauvegard√©es automatiquement
‚Ä¢ Aucun processus de simulation en arri√®re-plan

=== STATISTIQUES DE SESSION ===

‚Ä¢ Interface initialis√©e avec succ√®s
‚Ä¢ Tous les modules charg√©s correctement
‚Ä¢ Pas de threads secondaires actifs
‚Ä¢ M√©moire optimis√©e pour performance stable

=== NOTES IMPORTANTES ===

Cette version de l'interface ne contient pas de simulation temps r√©el.
Toutes les donn√©es affich√©es correspondent √† l'√©tat actuel de la base de donn√©es.
Pour voir les mises √† jour, utilisez les boutons de rafra√Æchissement disponibles."""

        self.activity_text.insert(tk.END, info_text)
    
    def update_header_info(self):
        """Met √† jour les informations d'en-t√™te"""
        # Horloge syst√®me
        current_time = datetime.now().strftime("%H:%M:%S")
        self.system_clock_var.set(current_time)
        
        # Derni√®re mise √† jour
        last_update = datetime.now().strftime("%H:%M:%S")
        self.last_update_var.set(last_update)
        
        # Programmer la prochaine mise √† jour de l'horloge dans 1 seconde
        self.parent_frame.after(1000, self.update_header_info)
    
    def load_initial_data(self):
        """Charge toutes les donn√©es initiales du dashboard"""
        try:
            self.refresh_kpi_data()
            self.refresh_data_overview()
            self.refresh_fleet_data()
            print("‚úÖ Donn√©es initiales du dashboard charg√©es")
        except Exception as e:
            print(f"‚ùå Erreur chargement donn√©es dashboard: {e}")
    
    def refresh_kpi_data(self):
        """Met √† jour tous les indicateurs KPI"""
        try:
            # Charger les donn√©es
            aircraft_list = self.data_manager.get_aircraft()
            personnel_list = self.data_manager.get_personnel()
            flights_list = self.data_manager.get_flights()
            passengers_list = self.data_manager.get_passengers()
            reservations_list = self.data_manager.get_reservations()
            
            # Calculs des KPI
            total_aircraft = len(aircraft_list)
            total_personnel = len(personnel_list)
            total_flights = len(flights_list)
            total_passengers = len(passengers_list)
            total_reservations = len(reservations_list)
            
            # Calculs plus d√©taill√©s
            operational_aircraft = sum(1 for a in aircraft_list if a.get('etat') in ['operationnel', 'au_sol'])
            available_personnel = sum(1 for p in personnel_list if p.get('disponible', True))
            active_reservations = sum(1 for r in reservations_list if r.get('statut') == 'active')
            
            # Mise √† jour des KPI
            kpi_updates = {
                "Total Avions": (str(total_aircraft), f"En service: {operational_aircraft}"),
                "Total Personnel": (str(total_personnel), f"Disponible: {available_personnel}"),
                "Total Vols": (str(total_flights), "Tous statuts"),
                "Total Passagers": (str(total_passengers), "Enregistr√©s"),
                "R√©servations": (str(active_reservations), f"Total: {total_reservations}"),
                "Avions Op√©rationnels": (str(operational_aircraft), f"Total: {total_aircraft}"),
                "Personnel Disponible": (str(available_personnel), f"Total: {total_personnel}"),
                "√âtat Syst√®me": ("OK", "Base de donn√©es active")
            }
            
            # Application des mises √† jour
            for kpi_name, (value, info) in kpi_updates.items():
                if kpi_name in self.stat_vars:
                    self.stat_vars[kpi_name]['value'].set(value)
                    self.stat_vars[kpi_name]['info'].set(info)
                    
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour KPI: {e}")
    
    def refresh_data_overview(self):
        """Met √† jour la vue d'ensemble des donn√©es"""
        try:
            # Vider les zones de texte
            self.data_text.delete("1.0", tk.END)
            self.resources_text.delete("1.0", tk.END)
            
            # Charger les donn√©es
            aircraft_list = self.data_manager.get_aircraft()
            personnel_list = self.data_manager.get_personnel()
            flights_list = self.data_manager.get_flights()
            
            # R√©partition des donn√©es
            data_overview = "=== R√âPARTITION DES DONN√âES ===\n\n"
            
            # R√©partition des avions par √©tat
            aircraft_states = {}
            for aircraft in aircraft_list:
                state = aircraft.get('etat', 'inconnu')
                aircraft_states[state] = aircraft_states.get(state, 0) + 1
            
            data_overview += "üõ©Ô∏è AVIONS PAR √âTAT :\n"
            for state, count in aircraft_states.items():
                state_display = state.replace('_', ' ').title()
                data_overview += f"‚Ä¢ {state_display}: {count}\n"
            
            # R√©partition du personnel par type
            personnel_types = {}
            for person in personnel_list:
                ptype = person.get('type_personnel', 'inconnu')
                personnel_types[ptype] = personnel_types.get(ptype, 0) + 1
            
            data_overview += "\nüë• PERSONNEL PAR TYPE :\n"
            for ptype, count in personnel_types.items():
                ptype_display = ptype.replace('_', ' ').title()
                data_overview += f"‚Ä¢ {ptype_display}: {count}\n"
            
            # R√©partition des vols par statut
            flight_statuses = {}
            for flight in flights_list:
                status = flight.get('statut', 'inconnu')
                flight_statuses[status] = flight_statuses.get(status, 0) + 1
            
            data_overview += "\nüõ´ VOLS PAR STATUT :\n"
            for status, count in flight_statuses.items():
                status_display = status.replace('_', ' ').title()
                data_overview += f"‚Ä¢ {status_display}: {count}\n"
            
            self.data_text.insert("1.0", data_overview)
            
            # √âtat des ressources
            resources_overview = "=== √âTAT DES RESSOURCES ===\n\n"
            
            # Capacit√© totale de transport
            total_capacity = sum(aircraft.get('capacite', 0) for aircraft in aircraft_list)
            operational_capacity = sum(aircraft.get('capacite', 0) for aircraft in aircraft_list 
                                     if aircraft.get('etat') in ['operationnel', 'au_sol'])
            
            resources_overview += "‚úàÔ∏è CAPACIT√â DE TRANSPORT :\n"
            resources_overview += f"‚Ä¢ Capacit√© totale: {total_capacity} passagers\n"
            resources_overview += f"‚Ä¢ Capacit√© op√©rationnelle: {operational_capacity} passagers\n"
            if total_capacity > 0:
                utilization = (operational_capacity / total_capacity) * 100
                resources_overview += f"‚Ä¢ Taux d'utilisation: {utilization:.1f}%\n"
            
            # Autonomie moyenne
            autonomies = [aircraft.get('autonomie', 0) for aircraft in aircraft_list if aircraft.get('autonomie', 0) > 0]
            if autonomies:
                avg_autonomy = sum(autonomies) / len(autonomies)
                max_autonomy = max(autonomies)
                min_autonomy = min(autonomies)
                
                resources_overview += "\nüõ£Ô∏è AUTONOMIE FLOTTE :\n"
                resources_overview += f"‚Ä¢ Autonomie moyenne: {avg_autonomy:.0f} km\n"
                resources_overview += f"‚Ä¢ Autonomie maximum: {max_autonomy} km\n"
                resources_overview += f"‚Ä¢ Autonomie minimum: {min_autonomy} km\n"
            
            # Personnel par disponibilit√©
            available_personnel = sum(1 for p in personnel_list if p.get('disponible', True))
            unavailable_personnel = len(personnel_list) - available_personnel
            
            resources_overview += "\nüë§ DISPONIBILIT√â PERSONNEL :\n"
            resources_overview += f"‚Ä¢ Personnel disponible: {available_personnel}\n"
            resources_overview += f"‚Ä¢ Personnel indisponible: {unavailable_personnel}\n"
            if len(personnel_list) > 0:
                availability_rate = (available_personnel / len(personnel_list)) * 100
                resources_overview += f"‚Ä¢ Taux de disponibilit√©: {availability_rate:.1f}%\n"
            
            # Statistiques des r√©servations
            reservations_list = self.data_manager.get_reservations()
            active_reservations = sum(1 for r in reservations_list if r.get('statut') == 'active')
            
            resources_overview += "\nüé´ R√âSERVATIONS :\n"
            resources_overview += f"‚Ä¢ R√©servations actives: {active_reservations}\n"
            resources_overview += f"‚Ä¢ Total r√©servations: {len(reservations_list)}\n"
            
            self.resources_text.insert("1.0", resources_overview)
                
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour vue d'ensemble: {e}")
    
    def refresh_fleet_data(self):
        """Met √† jour les donn√©es de la flotte"""
        try:
            # Vider le tableau
            for item in self.fleet_tree.get_children():
                self.fleet_tree.delete(item)
            
            aircraft_list = self.data_manager.get_aircraft()
            airports = self.data_manager.get_airports()
            
            # Limiter l'affichage aux 10 premiers avions pour le dashboard
            for aircraft in aircraft_list[:10]:
                # Obtenir la localisation
                location = "Base principale"
                if 'localisation' in aircraft:
                    loc_coords = aircraft['localisation']
                    for airport in airports:
                        airport_coords = airport['coordonnees']
                        if (abs(airport_coords['latitude'] - loc_coords.get('latitude', 0)) < 0.1 and
                            abs(airport_coords['longitude'] - loc_coords.get('longitude', 0)) < 0.1):
                            location = f"{airport['ville']} ({airport['code_iata']})"
                            break
                
                values = (
                    aircraft.get('num_id', ''),
                    aircraft.get('modele', ''),
                    aircraft.get('compagnie_aerienne', ''),
                    str(aircraft.get('capacite', '')),
                    aircraft.get('etat', 'au_sol').replace('_', ' ').title(),
                    location
                )
                
                self.fleet_tree.insert('', 'end', values=values)
            
            # Ajouter une ligne d'information si plus de 10 avions
            if len(aircraft_list) > 10:
                remaining = len(aircraft_list) - 10
                self.fleet_tree.insert('', 'end', values=(
                    '...', f'+ {remaining} autres avions', '', '', '', 'Voir onglet Avions'
                ))
                
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour flotte: {e}")
    
    def refresh_all_data(self):
        """Actualise toutes les donn√©es du dashboard"""
        try:
            self.refresh_kpi_data()
            self.refresh_data_overview()
            self.refresh_fleet_data()
            
            # Mettre √† jour l'heure de derni√®re mise √† jour
            self.last_update_var.set(datetime.now().strftime("%H:%M:%S"))
            
            print("‚úÖ Dashboard enti√®rement actualis√©")
            
        except Exception as e:
            print(f"‚ùå Erreur actualisation dashboard: {e}")


def create_dashboard_tab_content(parent_frame, data_manager):
    """
    Point d'entr√©e principal pour cr√©er le contenu de l'onglet dashboard.
    
    Args:
        parent_frame: Frame parent Tkinter
        data_manager: Instance du gestionnaire de donn√©es
    
    Returns:
        SimpleDashboard: Instance du dashboard cr√©√©
    """
    try:
        dashboard = SimpleDashboard(parent_frame, data_manager)
        print("‚úÖ Dashboard statique cr√©√© avec succ√®s")
        return dashboard
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation Dashboard: {e}")
        # Fallback en cas d'erreur
        error_label = ttk.Label(parent_frame, 
                            text=f"‚ùå Erreur de chargement du dashboard:\n{str(e)}", 
                            font=('Arial', 12), 
                            foreground='red',
                            justify='center')
        error_label.pack(expand=True)
        return None


# Fonction d'int√©gration dans l'interface principale
def integrate_dashboard_in_main_window(main_window):
    """
    Int√®gre le dashboard statique dans la fen√™tre principale.
    
    Args:
        main_window: Instance de MainWindow
    """
    try:
        # Remplacer le contenu de l'onglet dashboard existant
        if hasattr(main_window, 'dashboard_frame'):
            # Nettoyer l'ancien contenu
            for widget in main_window.dashboard_frame.winfo_children():
                widget.destroy()
            
            # Cr√©er le nouveau dashboard
            dashboard = create_dashboard_tab_content(
                main_window.dashboard_frame, 
                main_window.data_manager
            )
            
            # Stocker la r√©f√©rence pour les mises √† jour
            main_window.dashboard_instance = dashboard
            
            print("‚úÖ Dashboard statique int√©gr√© dans MainWindow")
            return dashboard
        else:
            print("‚ùå Aucun dashboard_frame trouv√© dans MainWindow")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur int√©gration dashboard: {e}")
        return None