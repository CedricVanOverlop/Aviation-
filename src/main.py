#!/usr/bin/env python3
"""
Syst√®me de Gestion et Simulateur de Vols
Point d'entr√©e principal de l'application

Ce fichier lance l'interface graphique principale avec tous les syst√®mes int√©gr√©s.
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox
import traceback
from datetime import datetime

# Ajouter le r√©pertoire racine au path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont disponibles"""
    try:
        # V√©rifier Python version
        if sys.version_info < (3, 8):
            raise Exception("Python 3.8 ou sup√©rieur requis")
        
        # V√©rifier tkinter
        import tkinter as tk
        
        # V√©rifier les modules locaux
        from interfaces.main_window import MainWindow
        from data.data_manager import DataManager
        from simulation.simulation_engine import SimulationEngine
        
        return True
        
    except ImportError as e:
        messagebox.showerror("D√©pendances manquantes", 
                           f"Module manquant: {e}\n\n"
                           "V√©rifiez que tous les fichiers sont pr√©sents.")
        return False
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur de v√©rification: {e}")
        return False

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires s'ils n'existent pas"""
    directories = [
        'data',
        'data/backups',
        'logs',
        'interfaces',
        'interfaces/dialogs',
        'simulation'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)

def setup_logging():
    """Configure le syst√®me de logging"""
    import logging
    from datetime import datetime
    
    # Cr√©er le r√©pertoire de logs
    os.makedirs('logs', exist_ok=True)
    
    # Configuration du logging
    log_filename = f"logs/app_{datetime.now().strftime('%Y%m%d')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger(__name__)

def handle_exception(exc_type, exc_value, exc_traceback):
    """Gestionnaire global d'exceptions"""
    if issubclass(exc_type, KeyboardInterrupt):
        # Permettre Ctrl+C
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    # Logger l'exception
    logger = logging.getLogger(__name__)
    logger.error("Exception non g√©r√©e", exc_info=(exc_type, exc_value, exc_traceback))
    
    # Afficher un message d'erreur √† l'utilisateur
    error_msg = f"Une erreur inattendue s'est produite:\n\n{exc_type.__name__}: {exc_value}"
    
    try:
        messagebox.showerror("Erreur Critique", error_msg)
    except:
        print(f"ERREUR CRITIQUE: {error_msg}")

def main():
    """Fonction principale de l'application"""
    print("üöÄ D√©marrage du Syst√®me de Gestion A√©roportuaire")
    print("=" * 50)
    
    try:
        # Configuration initiale
        logger = setup_logging()
        logger.info("Application d√©marr√©e")
        
        # Configuration du gestionnaire d'exceptions global
        sys.excepthook = handle_exception
        
        # Cr√©er les r√©pertoires n√©cessaires
        create_directories()
        logger.info("R√©pertoires cr√©√©s/v√©rifi√©s")
        
        # V√©rifier les d√©pendances
        if not check_dependencies():
            logger.error("V√©rification des d√©pendances √©chou√©e")
            return 1
        
        logger.info("D√©pendances v√©rifi√©es avec succ√®s")
        
        # Lancer l'interface principale
        logger.info("Lancement de l'interface principale")
        
        from interfaces.main_window import MainWindow
        
        app = MainWindow()
        logger.info("Interface initialis√©e")
        
        print("‚úÖ Interface pr√™te - Lancement de l'application")
        print("üí° Utilisez Ctrl+C pour arr√™ter proprement l'application")
        print("-" * 50)
        
        # Lancer la boucle principale
        app.run()
        
        logger.info("Application ferm√©e normalement")
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√© par l'utilisateur (Ctrl+C)")
        logger.info("Arr√™t par interruption clavier")
        return 0
        
    except Exception as e:
        error_trace = traceback.format_exc()
        print(f"‚ùå Erreur critique: {e}")
        print(f"Trace compl√®te:\n{error_trace}")
        
        if 'logger' in locals():
            logger.error(f"Erreur critique: {e}")
            logger.error(f"Trace: {error_trace}")
        
        try:
            messagebox.showerror("Erreur Critique", 
                               f"L'application n'a pas pu d√©marrer:\n\n{e}\n\n"
                               f"Consultez les logs pour plus de d√©tails.")
        except:
            pass
        
        return 1

def check_data_integrity():
    """V√©rifie l'int√©grit√© des donn√©es au d√©marrage"""
    try:
        from data.data_manager import DataManager
        
        dm = DataManager()
        report = dm.validate_data_integrity()
        
        if not report['valid']:
            print("‚ö†Ô∏è Probl√®mes d√©tect√©s dans les donn√©es:")
            for error in report['errors']:
                print(f"  ‚Ä¢ {error}")
        
        if report['warnings']:
            print("‚ö†Ô∏è Avertissements:")
            for warning in report['warnings']:
                print(f"  ‚Ä¢ {warning}")
        
        return report['valid']
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des donn√©es: {e}")
        return False

def show_startup_info():
    """Affiche les informations de d√©marrage"""
    print("üìã Informations syst√®me:")
    print(f"  ‚Ä¢ Python: {sys.version.split()[0]}")
    print(f"  ‚Ä¢ Plateforme: {sys.platform}")
    print(f"  ‚Ä¢ R√©pertoire: {os.getcwd()}")
    print(f"  ‚Ä¢ PID: {os.getpid()}")
    print()

def create_desktop_shortcut():
    """Cr√©e un raccourci sur le bureau (Windows uniquement)"""
    if sys.platform.startswith('win'):
        try:
            import winshell
            from win32com.client import Dispatch
            
            desktop = winshell.desktop()
            path = os.path.join(desktop, "Gestion A√©roportuaire.lnk")
            target = os.path.abspath(__file__)
            
            shell = Dispatch('WScript.Shell')
            shortcut = shell.CreateShortCut(path)
            shortcut.Targetpath = sys.executable
            shortcut.Arguments = f'"{target}"'
            shortcut.WorkingDirectory = os.path.dirname(target)
            shortcut.IconLocation = target
            shortcut.save()
            
            print(f"‚úÖ Raccourci cr√©√©: {path}")
            
        except ImportError:
            # Modules win32 non disponibles
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de cr√©er le raccourci: {e}")

def check_first_run():
    """V√©rifie si c'est le premier lancement de l'application"""
    marker_file = os.path.join('data', '.first_run_complete')
    
    if not os.path.exists(marker_file):
        print("üéâ Premier lancement d√©tect√©!")
        print("üîß Configuration initiale en cours...")
        
        # Cr√©er les fichiers de base s'ils n'existent pas
        try:
            from data.data_manager import DataManager
            dm = DataManager()
            
            # V√©rifier que les fichiers airports.json et aircraft_models.json existent
            airports_file = dm.files['airports']
            models_file = dm.files['aircraft_models']
            
            if not airports_file.exists():
                print("‚ö†Ô∏è Fichier airports.json manquant!")
                print("üì• Vous devez copier le fichier airports.json dans le dossier data/")
                
            if not models_file.exists():
                print("‚ö†Ô∏è Fichier aircraft_models.json manquant!")
                print("üì• Vous devez copier le fichier aircraft_models.json dans le dossier data/")
            
            # Marquer comme configur√©
            with open(marker_file, 'w') as f:
                f.write(f"First run completed on {sys.version}\n")
                f.write(f"Date: {datetime.now().isoformat()}\n")
            
            print("‚úÖ Configuration initiale termin√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la configuration initiale: {e}")
            return False
    
    return True

if __name__ == "__main__":
    # Affichage des informations de d√©marrage
    show_startup_info()
    
    # V√©rification du premier lancement
    if not check_first_run():
        print("‚ùå Configuration initiale √©chou√©e")
        sys.exit(1)
    
    # V√©rification de l'int√©grit√© des donn√©es
    print("üîç V√©rification de l'int√©grit√© des donn√©es...")
    if not check_data_integrity():
        print("‚ö†Ô∏è Probl√®mes d√©tect√©s dans les donn√©es, mais l'application peut continuer")
    
    # Cr√©ation du raccourci (optionnel)
    create_desktop_shortcut()
    
    # Lancement de l'application principale
    exit_code = main()
    
    # Nettoyage et sortie
    print(f"\nüëã Application ferm√©e (code: {exit_code})")
    sys.exit(exit_code)