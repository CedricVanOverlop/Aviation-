#!/usr/bin/env python3
"""
Script de d√©marrage de l'interface a√©roportuaire - VERSION SANS SIMULATION
Fichier: main.py (√† placer dans le dossier src/)

Cette version ne contient aucun √©l√©ment de simulation temporelle.
L'interface fonctionne de mani√®re statique avec rafra√Æchissement manuel.
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox

def main():
    """Point d'entr√©e principal de l'application"""
    print("="*60)
    print("üè¢ SYST√àME DE GESTION A√âROPORTUAIRE")
    print("üìä Version Interface Statique (Sans Simulation)")
    print("="*60)
    print()
    
    try:
        # V√©rifier la version Python
        if sys.version_info < (3, 7):
            print("‚ùå Python 3.7 ou plus r√©cent requis")
            print(f"   Version actuelle: {sys.version}")
            return 1
        
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        
        # Obtenir le r√©pertoire actuel (src/)
        current_dir = os.path.dirname(os.path.abspath(__file__))
        print(f"‚úÖ R√©pertoire de travail: {current_dir}")
        
        # Ajouter les r√©pertoires n√©cessaires au PYTHONPATH
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)
        
        # Ajouter le r√©pertoire parent pour acc√©der aux modules Core
        parent_dir = os.path.dirname(current_dir)
        if parent_dir not in sys.path:
            sys.path.insert(0, parent_dir)
        
        # V√©rifier que les modules n√©cessaires sont disponibles
        try:
            import tkinter.ttk
            print("‚úÖ Tkinter disponible")
        except ImportError:
            print("‚ùå Tkinter non disponible")
            return 1
        
        # V√©rifier la structure des fichiers
        if not check_files_exist():
            print("‚ùå Fichiers manquants d√©tect√©s")
            return 1
        
        # Importer et lancer l'interface principale
        print("üîÑ Chargement de l'interface...")
        
        try:
            from interfaces.main_window import MainWindow
            print("‚úÖ Module interface charg√©")
        except ImportError as e:
            print(f"‚ùå Erreur import interface: {e}")
            print("   V√©rifiez que le fichier interfaces/main_window.py existe")
            return 1
        
        # Initialiser et lancer l'application
        print("üöÄ D√©marrage de l'interface...")
        print()
        print("üîß MODE: Interface statique sans simulation")
        print("üìù UTILISATION:")
        print("   ‚Ä¢ Utilisez le bouton 'Actualiser' pour mettre √† jour les donn√©es")
        print("   ‚Ä¢ Naviguez entre les onglets pour g√©rer les entit√©s")
        print("   ‚Ä¢ Toutes les modifications sont sauvegard√©es automatiquement")
        print("   ‚Ä¢ Aucun processus de simulation en arri√®re-plan")
        print()
        
        # Cr√©er et lancer l'application
        app = MainWindow()
        
        print("‚úÖ Interface initialis√©e avec succ√®s")
        print("üñ•Ô∏è Fen√™tre principale ouverte")
        print()
        print("üí° Pour fermer l'application :")
        print("   ‚Ä¢ Cliquez sur le X de la fen√™tre")
        print("   ‚Ä¢ Ou utilisez Ctrl+C dans ce terminal")
        print()
        
        # Lancer la boucle principale
        app.run()
        
        print("\nüëã Application ferm√©e proprement")
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë Interruption utilisateur (Ctrl+C)")
        print("üëã Fermeture de l'application...")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Erreur fatale lors du d√©marrage:")
        print(f"   {type(e).__name__}: {e}")
        print()
        print("üîç V√©rifications sugg√©r√©es:")
        print("   1. Tous les fichiers source sont pr√©sents")
        print("   2. Les d√©pendances Python sont install√©es")
        print("   3. Les permissions de fichier sont correctes")
        print("   4. Le r√©pertoire de donn√©es existe")
        print()
        
        # Afficher la traceback compl√®te en mode debug
        import traceback
        print("üìã Traceback compl√®te:")
        traceback.print_exc()
        
        return 1

def check_files_exist():
    """V√©rifie que les fichiers n√©cessaires existent"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Fichiers requis dans la structure actuelle
    required_files = [
        'interfaces/main_window.py',
        'interfaces/tabs/dashboard_tab.py', 
        'interfaces/tabs/aircraft_tab.py',
        'interfaces/tabs/flights_tab.py',
        'interfaces/tabs/personnel_tab.py',
        'interfaces/tabs/passengers_tab.py',
        'interfaces/tabs/reservations_tab.py',
        'data/data_manager.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = os.path.join(current_dir, file_path)
        if not os.path.exists(full_path):
            missing_files.append(file_path)
            print(f"‚ùå Fichier manquant: {file_path}")
        else:
            print(f"‚úÖ Fichier trouv√©: {file_path}")
    
    # V√©rifier et cr√©er le r√©pertoire de donn√©es si n√©cessaire
    data_dir = os.path.join(current_dir, '..', 'data')
    if not os.path.exists(data_dir):
        print(f"‚ö†Ô∏è R√©pertoire de donn√©es manquant: {data_dir}")
        try:
            os.makedirs(data_dir, exist_ok=True)
            print(f"‚úÖ R√©pertoire de donn√©es cr√©√©: {data_dir}")
        except OSError as e:
            print(f"‚ùå Impossible de cr√©er le r√©pertoire de donn√©es: {e}")
    
    return len(missing_files) == 0

def check_environment():
    """V√©rifie l'environnement d'ex√©cution complet"""
    print("üîç V√©rification compl√®te de l'environnement...")
    print()
    
    issues = []
    
    # V√©rifier Python
    print("1. Version Python...")
    if sys.version_info < (3, 7):
        issues.append(f"Python 3.7+ requis (actuel: {sys.version_info.major}.{sys.version_info.minor})")
        print(f"   ‚ùå Python {sys.version_info.major}.{sys.version_info.minor} (requis: 3.7+)")
    else:
        print(f"   ‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    
    # V√©rifier Tkinter
    print("2. Tkinter...")
    try:
        import tkinter
        import tkinter.ttk
        print("   ‚úÖ Tkinter disponible")
    except ImportError:
        issues.append("Tkinter non disponible")
        print("   ‚ùå Tkinter non disponible")
    
    # V√©rifier la structure des fichiers
    print("3. Structure des fichiers...")
    if check_files_exist():
        print("   ‚úÖ Tous les fichiers requis sont pr√©sents")
    else:
        issues.append("Fichiers manquants")
        print("   ‚ùå Fichiers manquants d√©tect√©s")
    
    # V√©rifier les modules Core
    print("4. Modules Core...")
    current_dir = os.path.dirname(os.path.abspath(__file__))
    core_dir = os.path.join(current_dir, '..', 'Core')
    
    if os.path.exists(core_dir):
        print(f"   ‚úÖ R√©pertoire Core trouv√©: {core_dir}")
        
        # V√©rifier quelques modules Core essentiels
        core_files = ['aviation.py', 'vol.py', 'enums.py', 'personnes.py']
        for core_file in core_files:
            core_path = os.path.join(core_dir, core_file)
            if os.path.exists(core_path):
                print(f"   ‚úÖ {core_file}")
            else:
                print(f"   ‚ö†Ô∏è {core_file} manquant")
    else:
        print(f"   ‚ö†Ô∏è R√©pertoire Core non trouv√©: {core_dir}")
    
    print()
    
    if issues:
        print("‚ùå Probl√®mes d√©tect√©s:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
        return False
    else:
        print("‚úÖ Environnement pr√™t pour l'interface")
        return True

def show_help():
    """Affiche l'aide"""
    help_text = """
üè¢ SYST√àME DE GESTION A√âROPORTUAIRE - AIDE

UTILISATION:
    python main.py [OPTIONS]

OPTIONS:
    --help, -h      Affiche cette aide
    --check         V√©rifie l'environnement sans lancer l'interface
    --version       Affiche la version

STRUCTURE ATTENDUE:
    src/
    ‚îú‚îÄ‚îÄ main.py                    (ce fichier)
    ‚îú‚îÄ‚îÄ interfaces/
    ‚îÇ   ‚îú‚îÄ‚îÄ main_window.py
    ‚îÇ   ‚îî‚îÄ‚îÄ tabs/
    ‚îÇ       ‚îú‚îÄ‚îÄ dashboard_tab.py
    ‚îÇ       ‚îú‚îÄ‚îÄ aircraft_tab.py
    ‚îÇ       ‚îú‚îÄ‚îÄ flights_tab.py
    ‚îÇ       ‚îú‚îÄ‚îÄ personnel_tab.py
    ‚îÇ       ‚îú‚îÄ‚îÄ passengers_tab.py
    ‚îÇ       ‚îî‚îÄ‚îÄ reservations_tab.py
    ‚îú‚îÄ‚îÄ data/
    ‚îÇ   ‚îî‚îÄ‚îÄ data_manager.py
    ‚îî‚îÄ‚îÄ simulation/
        ‚îî‚îÄ‚îÄ simulation_engine.py

FONCTIONNALIT√âS:
    ‚úàÔ∏è Gestion de la flotte d'avions
    üë• Administration du personnel
    üõ´ Planification des vols
    üß≥ Gestion des passagers
    üé´ Suivi des r√©servations
    üìä Tableau de bord avec statistiques

MODE DE FONCTIONNEMENT:
    Cette version fonctionne sans simulation temps r√©el.
    Toutes les donn√©es sont g√©r√©es de mani√®re statique.
    
    ‚Ä¢ Pas de threads secondaires
    ‚Ä¢ Pas de mises √† jour automatiques
    ‚Ä¢ Rafra√Æchissement manuel uniquement
    ‚Ä¢ Interface stable et performante

NAVIGATION:
    ‚Ä¢ Utilisez les onglets pour naviguer entre les modules
    ‚Ä¢ Bouton "Actualiser" pour mettre √† jour les donn√©es
    ‚Ä¢ Bouton "Statistiques" pour voir un r√©sum√© global
    ‚Ä¢ Bouton "Sauvegarder" pour forcer la sauvegarde

D√âPANNAGE:
    1. V√©rifiez que vous √™tes dans le r√©pertoire src/
    2. Ex√©cutez 'python main.py --check' pour diagnostiquer
    3. V√©rifiez que tous les fichiers sont pr√©sents
    4. Assurez-vous que Python 3.7+ est install√©
    
EXEMPLES:
    python main.py                 # Lancer l'interface
    python main.py --check         # V√©rifier l'environnement
    python main.py --help          # Afficher cette aide
    
Pour plus d'informations, consultez la documentation.
"""
    print(help_text)

def show_file_structure():
    """Affiche la structure de fichiers attendue"""
    print("üìÅ STRUCTURE DE FICHIERS ATTENDUE:")
    print()
    
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    structure = [
        ("src/", "üìÅ"),
        ("‚îú‚îÄ‚îÄ main.py", "üêç"),
        ("‚îú‚îÄ‚îÄ interfaces/", "üìÅ"),
        ("‚îÇ   ‚îú‚îÄ‚îÄ main_window.py", "üñ•Ô∏è"),
        ("‚îÇ   ‚îî‚îÄ‚îÄ tabs/", "üìÅ"),
        ("‚îÇ       ‚îú‚îÄ‚îÄ dashboard_tab.py", "üìä"),
        ("‚îÇ       ‚îú‚îÄ‚îÄ aircraft_tab.py", "‚úàÔ∏è"),
        ("‚îÇ       ‚îú‚îÄ‚îÄ flights_tab.py", "üõ´"),
        ("‚îÇ       ‚îú‚îÄ‚îÄ personnel_tab.py", "üë•"),
        ("‚îÇ       ‚îú‚îÄ‚îÄ passengers_tab.py", "üß≥"),
        ("‚îÇ       ‚îî‚îÄ‚îÄ reservations_tab.py", "üé´"),
        ("‚îú‚îÄ‚îÄ data/", "üìÅ"),
        ("‚îÇ   ‚îî‚îÄ‚îÄ data_manager.py", "üíæ"),
        ("‚îî‚îÄ‚îÄ simulation/", "üìÅ"),
        ("    ‚îî‚îÄ‚îÄ simulation_engine.py", "‚öôÔ∏è")
    ]
    
    for path, icon in structure:
        full_path = os.path.join(current_dir, path.replace("‚îú‚îÄ‚îÄ ", "").replace("‚îÇ   ", "").replace("‚îÇ       ", "").replace("‚îî‚îÄ‚îÄ ", "").replace("    ", ""))
        
        if "main.py" in path:
            status = "‚úÖ" if os.path.exists(full_path) else "‚ùå"
        elif path.endswith("/"):
            status = "‚úÖ" if os.path.exists(full_path) else "‚ùå"
        elif path.endswith(".py"):
            status = "‚úÖ" if os.path.exists(full_path) else "‚ùå"
        else:
            status = ""
        
        print(f"{status} {icon} {path}")
    
    print()
    print("üí° CONSEIL: Placez main.py dans le dossier src/ et ex√©cutez-le depuis l√†.")

if __name__ == "__main__":
    # Gestion des arguments de ligne de commande
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['--help', '-h']:
            show_help()
            sys.exit(0)
        elif arg == '--check':
            if check_environment():
                sys.exit(0)
            else:
                print("\nüìÅ Structure attendue:")
                show_file_structure()
                sys.exit(1)
        elif arg == '--structure':
            show_file_structure()
            sys.exit(0)
        elif arg == '--version':
            print("Syst√®me de Gestion A√©roportuaire - Version Interface Statique")
            print("Version: 1.0.0-static")
            print("Mode: Sans simulation temporelle")
            sys.exit(0)
        else:
            print(f"‚ùå Argument inconnu: {arg}")
            print("Utilisez --help pour voir les options disponibles")
            sys.exit(1)
    
    # V√©rification rapide avant lancement
    if not check_environment():
        print("\n‚ùå L'environnement n'est pas pr√™t")
        print("üìÅ Voici la structure attendue:")
        show_file_structure()
        print("\nüí° Utilisez 'python main.py --check' pour plus de d√©tails")
        sys.exit(1)
    
    # Lancer l'application
    exit_code = main()
    sys.exit(exit_code)