"""
Panneau de contr√¥le de la simulation temporelle
Affich√© en permanence en haut de l'interface principale
"""

import tkinter as tk
from tkinter import ttk
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class SimulationPanel(ttk.Frame):
    """Panneau de contr√¥le de la simulation temporelle"""
    
    def __init__(self, parent, simulator, sim_running_var, sim_speed_var, current_time_var):
        super().__init__(parent)
        
        self.simulator = simulator
        self.sim_running_var = sim_running_var
        self.sim_speed_var = sim_speed_var
        self.current_time_var = current_time_var
        
        # Variables d'affichage
        self.status_var = tk.StringVar(value="Arr√™t√©e")
        self.next_event_var = tk.StringVar(value="Aucun √©v√©nement")
        self.events_count_var = tk.StringVar(value="0")
        
        self.setup_ui()
        self.update_display()
        
        logger.info("Panneau de simulation initialis√©")
    
    def setup_ui(self):
        """Configure l'interface du panneau"""
        
        # Frame principal avec bordure
        main_frame = ttk.LabelFrame(self, text="üéÆ Contr√¥le de Simulation", padding=10)
        main_frame.pack(fill='x', padx=5, pady=2)
        
        # Premi√®re ligne : Temps et statut
        time_frame = ttk.Frame(main_frame)
        time_frame.pack(fill='x', pady=(0, 5))
        
        # Temps de simulation (gauche)
        ttk.Label(time_frame, text="‚è∞ Temps simul√©:", font=('Arial', 10, 'bold')).pack(side='left')
        time_label = ttk.Label(time_frame, textvariable=self.current_time_var, 
                              font=('Arial', 12, 'bold'), foreground='blue')
        time_label.pack(side='left', padx=(5, 20))
        
        # Statut (centre)
        ttk.Label(time_frame, text="Statut:", font=('Arial', 10)).pack(side='left')
        status_label = ttk.Label(time_frame, textvariable=self.status_var, 
                               font=('Arial', 10, 'bold'))
        status_label.pack(side='left', padx=(5, 20))
        
        # √âv√©nements programm√©s (droite)
        ttk.Label(time_frame, text="√âv√©nements:", font=('Arial', 10)).pack(side='left')
        events_label = ttk.Label(time_frame, textvariable=self.events_count_var, 
                               font=('Arial', 10, 'bold'))
        events_label.pack(side='left', padx=5)
        
        # Deuxi√®me ligne : Contr√¥les
        controls_frame = ttk.Frame(main_frame)
        controls_frame.pack(fill='x')
        
        # Boutons de contr√¥le (gauche)
        buttons_frame = ttk.Frame(controls_frame)
        buttons_frame.pack(side='left')
        
        self.start_btn = ttk.Button(buttons_frame, text="‚ñ∂ D√©marrer", 
                                   command=self.start_simulation, width=12)
        self.start_btn.pack(side='left', padx=2)
        
        self.pause_btn = ttk.Button(buttons_frame, text="‚è∏ Pause", 
                                   command=self.pause_simulation, width=12)
        self.pause_btn.pack(side='left', padx=2)
        
        self.stop_btn = ttk.Button(buttons_frame, text="‚èπ Arr√™ter", 
                                  command=self.stop_simulation, width=12)
        self.stop_btn.pack(side='left', padx=2)
        
        # S√©parateur
        ttk.Separator(controls_frame, orient='vertical').pack(side='left', fill='y', padx=10)
        
        # Contr√¥le de vitesse (centre)
        speed_frame = ttk.Frame(controls_frame)
        speed_frame.pack(side='left', padx=10)
        
        ttk.Label(speed_frame, text="Vitesse:", font=('Arial', 10)).pack(side='left')
        
        self.speed_combo = ttk.Combobox(speed_frame, textvariable=self.sim_speed_var,
                                       values=[0.1, 0.5, 1, 2, 5, 10, 30, 60], 
                                       width=8, state='readonly')
        self.speed_combo.pack(side='left', padx=5)
        self.speed_combo.bind('<<ComboboxSelected>>', self.on_speed_change)
        
        ttk.Label(speed_frame, text="x", font=('Arial', 10)).pack(side='left')
        
        # Boutons de vitesse rapide
        speed_buttons_frame = ttk.Frame(speed_frame)
        speed_buttons_frame.pack(side='left', padx=(10, 0))
        
        ttk.Button(speed_buttons_frame, text="0.5x", width=4,
                  command=lambda: self.set_speed(0.5)).pack(side='left', padx=1)
        ttk.Button(speed_buttons_frame, text="1x", width=4,
                  command=lambda: self.set_speed(1)).pack(side='left', padx=1)
        ttk.Button(speed_buttons_frame, text="10x", width=4,
                  command=lambda: self.set_speed(10)).pack(side='left', padx=1)
        ttk.Button(speed_buttons_frame, text="60x", width=4,
                  command=lambda: self.set_speed(60)).pack(side='left', padx=1)
        
        # S√©parateur
        ttk.Separator(controls_frame, orient='vertical').pack(side='left', fill='y', padx=10)
        
        # Contr√¥les avanc√©s (droite)
        advanced_frame = ttk.Frame(controls_frame)
        advanced_frame.pack(side='right')
        
        ttk.Button(advanced_frame, text="‚è© Avance Rapide", 
                  command=self.fast_forward_dialog, width=15).pack(side='left', padx=2)
        ttk.Button(advanced_frame, text="üîÑ Reset", 
                  command=self.reset_simulation, width=10).pack(side='left', padx=2)
        
        # Troisi√®me ligne : Prochain √©v√©nement
        event_frame = ttk.Frame(main_frame)
        event_frame.pack(fill='x', pady=(5, 0))
        
        ttk.Label(event_frame, text="üìÖ Prochain √©v√©nement:", font=('Arial', 9)).pack(side='left')
        event_label = ttk.Label(event_frame, textvariable=self.next_event_var, 
                              font=('Arial', 9), foreground='gray')
        event_label.pack(side='left', padx=5)
    
    def start_simulation(self):
        """D√©marre la simulation"""
        self.simulator.start()
        self.sim_running_var.set(True)
        self.update_button_states()
        logger.info("Simulation d√©marr√©e depuis le panneau")
    
    def pause_simulation(self):
        """Met en pause la simulation"""
        self.simulator.pause()
        self.sim_running_var.set(False)
        self.update_button_states()
        logger.info("Simulation mise en pause")
    
    def stop_simulation(self):
        """Arr√™te la simulation"""
        self.simulator.stop()
        self.sim_running_var.set(False)
        self.update_button_states()
        logger.info("Simulation arr√™t√©e")
    
    def reset_simulation(self):
        """Remet la simulation √† z√©ro"""
        from tkinter import messagebox
        
        if messagebox.askyesno("Confirmer", "R√©initialiser la simulation ?\nTous les √©v√©nements programm√©s seront perdus."):
            self.simulator.stop()
            self.simulator.reset_to_default()
            self.sim_running_var.set(False)
            self.update_button_states()
            self.update_display()
            logger.info("Simulation r√©initialis√©e")
    
    def on_speed_change(self, event=None):
        """Gestionnaire de changement de vitesse"""
        try:
            speed = float(self.sim_speed_var.get())
            self.simulator.set_speed(speed)
            logger.debug(f"Vitesse de simulation chang√©e: {speed}x")
        except ValueError:
            logger.warning("Vitesse de simulation invalide")
    
    def set_speed(self, speed):
        """D√©finit directement la vitesse"""
        self.sim_speed_var.set(speed)
        self.simulator.set_speed(speed)
        logger.debug(f"Vitesse d√©finie: {speed}x")
    
    def fast_forward_dialog(self):
        """Ouvre le dialogue d'avance rapide"""
        dialog = tk.Toplevel(self)
        dialog.title("Avance Rapide")
        dialog.geometry("400x250")
        dialog.resizable(False, False)
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        # Contenu du dialogue
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill='both', expand=True)
        
        ttk.Label(main_frame, text="Avancer la simulation jusqu'√†:", 
                 font=('Arial', 12, 'bold')).pack(pady=(0, 15))
        
        # Options d'avance rapide
        option_var = tk.StringVar(value="duration")
        
        # Option 1: Dur√©e
        duration_frame = ttk.Frame(main_frame)
        duration_frame.pack(fill='x', pady=5)
        
        ttk.Radiobutton(duration_frame, text="Avancer de:", variable=option_var, 
                       value="duration").pack(side='left')
        
        duration_var = tk.StringVar(value="1")
        duration_entry = ttk.Entry(duration_frame, textvariable=duration_var, width=5)
        duration_entry.pack(side='left', padx=5)
        
        unit_var = tk.StringVar(value="heures")
        unit_combo = ttk.Combobox(duration_frame, textvariable=unit_var,
                                 values=["minutes", "heures", "jours"], 
                                 width=10, state='readonly')
        unit_combo.pack(side='left', padx=5)
        
        # Option 2: Heure sp√©cifique
        time_frame = ttk.Frame(main_frame)
        time_frame.pack(fill='x', pady=5)
        
        ttk.Radiobutton(time_frame, text="Aller √†:", variable=option_var, 
                       value="specific").pack(side='left')
        
        # Date
        date_var = tk.StringVar(value=self.simulator.current_time.strftime('%Y-%m-%d'))
        date_entry = ttk.Entry(time_frame, textvariable=date_var, width=12)
        date_entry.pack(side='left', padx=5)
        
        # Heure
        time_var = tk.StringVar(value="12:00:00")
        time_entry = ttk.Entry(time_frame, textvariable=time_var, width=10)
        time_entry.pack(side='left', padx=5)
        
        # Option traitement des √©v√©nements
        process_events = tk.BooleanVar(value=True)
        ttk.Checkbutton(main_frame, text="Traiter les √©v√©nements programm√©s", 
                       variable=process_events).pack(pady=15)
        
        # Boutons
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=20)
        
        def execute_fast_forward():
            try:
                if option_var.get() == "duration":
                    # Avancer d'une dur√©e
                    duration = float(duration_var.get())
                    unit = unit_var.get()
                    
                    if unit == "minutes":
                        delta = timedelta(minutes=duration)
                    elif unit == "heures":
                        delta = timedelta(hours=duration)
                    else:  # jours
                        delta = timedelta(days=duration)
                    
                    target_time = self.simulator.current_time + delta
                    
                else:
                    # Aller √† une heure sp√©cifique
                    target_datetime = datetime.strptime(f"{date_var.get()} {time_var.get()}", 
                                                      '%Y-%m-%d %H:%M:%S')
                    target_time = target_datetime
                
                # Ex√©cuter l'avance rapide
                events_processed = self.simulator.fast_forward_to(target_time, process_events.get())
                
                # Mettre √† jour l'affichage
                self.update_display()
                
                from tkinter import messagebox
                messagebox.showinfo("Avance Rapide", 
                                  f"Avance effectu√©e jusqu'√† {target_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                  f"{events_processed} √©v√©nements trait√©s.")
                dialog.destroy()
                
            except ValueError as e:
                from tkinter import messagebox
                messagebox.showerror("Erreur", f"Format invalide: {e}")
            except Exception as e:
                from tkinter import messagebox
                messagebox.showerror("Erreur", f"Erreur lors de l'avance rapide: {e}")
        
        ttk.Button(btn_frame, text="Ex√©cuter", command=execute_fast_forward).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="Annuler", command=dialog.destroy).pack(side='left', padx=5)
    
    def update_button_states(self):
        """Met √† jour l'√©tat des boutons selon la simulation"""
        if self.simulator.is_running:
            self.start_btn.config(state='disabled')
            self.pause_btn.config(state='normal')
            self.stop_btn.config(state='normal')
            self.status_var.set("En cours")
        else:
            self.start_btn.config(state='normal')
            self.pause_btn.config(state='disabled')
            self.stop_btn.config(state='disabled')
            self.status_var.set("Arr√™t√©e")
    
    def update_display(self):
        """Met √† jour l'affichage du panneau"""
        try:
            # Mettre √† jour le temps
            current_time = self.simulator.current_time
            self.current_time_var.set(current_time.strftime('%Y-%m-%d %H:%M:%S'))
            
            # Mettre √† jour le statut
            self.update_button_states()
            
            # Mettre √† jour les √©v√©nements
            scheduled_events = self.simulator.get_scheduled_events()
            self.events_count_var.set(str(len(scheduled_events)))
            
            # Prochain √©v√©nement
            next_event_info = self.simulator.get_next_event_info()
            if next_event_info:
                event_text = f"{next_event_info['action']} √† {next_event_info['scheduled_time'][:16]}"
                self.next_event_var.set(event_text)
            else:
                self.next_event_var.set("Aucun √©v√©nement programm√©")
            
            # Mettre √† jour la vitesse affich√©e
            current_speed = self.simulator.speed_multiplier
            self.sim_speed_var.set(current_speed)
            
        except Exception as e:
            logger.error(f"Erreur mise √† jour panneau simulation: {e}")
    
    def get_simulation_info(self):
        """Retourne les informations de simulation pour autres composants"""
        return {
            'is_running': self.simulator.is_running,
            'current_time': self.simulator.current_time,
            'speed': self.simulator.speed_multiplier,
            'events_count': len(self.simulator.get_scheduled_events())
        }